
PillCap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001452  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001452  00001506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c6  00800068  00800068  0000150e  2**0
                  ALLOC
  3 .eeprom       00000200  00810000  00810000  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00001780  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000034a2  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ec5  00000000  00000000  00004f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019c9  00000000  00000000  00005dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000057c  00000000  00000000  00007798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c1f  00000000  00000000  00007d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001695  00000000  00000000  00008933  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e8  00000000  00000000  00009fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	0a c7       	rjmp	.+3604   	; 0xe18 <__vector_1>
       4:	a7 c7       	rjmp	.+3918   	; 0xf54 <__vector_2>
       6:	7f c0       	rjmp	.+254    	; 0x106 <__bad_interrupt>
       8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
       a:	7d c0       	rjmp	.+250    	; 0x106 <__bad_interrupt>
       c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
       e:	7b c0       	rjmp	.+246    	; 0x106 <__bad_interrupt>
      10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
      12:	79 c0       	rjmp	.+242    	; 0x106 <__bad_interrupt>
      14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
      16:	6a c7       	rjmp	.+3796   	; 0xeec <__vector_11>
      18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
      1a:	75 c0       	rjmp	.+234    	; 0x106 <__bad_interrupt>
      1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
      1e:	73 c0       	rjmp	.+230    	; 0x106 <__bad_interrupt>
      20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
      22:	d1 c0       	rjmp	.+418    	; 0x1c6 <Com_Get_Parameter+0x42>
      24:	d8 c0       	rjmp	.+432    	; 0x1d6 <Com_Get_Parameter+0x52>
      26:	df c0       	rjmp	.+446    	; 0x1e6 <Com_Get_Parameter+0x62>
      28:	e6 c0       	rjmp	.+460    	; 0x1f6 <Com_Get_Parameter+0x72>
      2a:	ed c0       	rjmp	.+474    	; 0x206 <Com_Get_Parameter+0x82>
      2c:	f4 c0       	rjmp	.+488    	; 0x216 <Com_Get_Parameter+0x92>
      2e:	fc c0       	rjmp	.+504    	; 0x228 <Com_Get_Parameter+0xa4>
      30:	33 c1       	rjmp	.+614    	; 0x298 <__stack+0x39>
      32:	38 c1       	rjmp	.+624    	; 0x2a4 <__stack+0x45>
      34:	3d c1       	rjmp	.+634    	; 0x2b0 <__stack+0x51>
      36:	42 c1       	rjmp	.+644    	; 0x2bc <__stack+0x5d>
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__stack+0x69>
      3a:	4c c1       	rjmp	.+664    	; 0x2d4 <__stack+0x75>
      3c:	93 c1       	rjmp	.+806    	; 0x364 <__stack+0x105>
      3e:	d1 c1       	rjmp	.+930    	; 0x3e2 <Com_Parse_String+0x4a>
      40:	e6 c1       	rjmp	.+972    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
      42:	04 c2       	rjmp	.+1032   	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
      44:	2f c2       	rjmp	.+1118   	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
      46:	7a c2       	rjmp	.+1268   	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
      48:	ad c2       	rjmp	.+1370   	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
      4a:	c8 c2       	rjmp	.+1424   	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
      4c:	cb c2       	rjmp	.+1430   	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
      4e:	f3 c2       	rjmp	.+1510   	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
      50:	92 c3       	rjmp	.+1828   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      52:	91 c3       	rjmp	.+1826   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      54:	90 c3       	rjmp	.+1824   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      56:	f1 c2       	rjmp	.+1506   	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
      58:	1d c3       	rjmp	.+1594   	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
      5a:	8d c3       	rjmp	.+1818   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      5c:	32 c3       	rjmp	.+1636   	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
      5e:	8b c3       	rjmp	.+1814   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      60:	8a c3       	rjmp	.+1812   	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
      62:	83 c3       	rjmp	.+1798   	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
      64:	86 c3       	rjmp	.+1804   	; 0x772 <__LOCK_REGION_LENGTH__+0x372>

00000066 <__trampolines_end>:
      66:	0d 0a       	sbc	r0, r29
	...

00000069 <__c.2283>:
      69:	50 3a 00                                            P:.

0000006c <__c.2300>:
      6c:	0d 0a 00                                            ...

0000006f <__c.2298>:
      6f:	41 00                                               A.

00000071 <__c.2317>:
      71:	0d 0a 00                                            ...

00000074 <__c.2312>:
      74:	0d 0a 00                                            ...

00000077 <__c.2310>:
      77:	44 3a 00                                            D:.

0000007a <__c.2425>:
      7a:	0d 0a 00                                            ...

0000007d <__c.2423>:
      7d:	4e 55 00                                            NU.

00000080 <__c.2417>:
      80:	0d 0a 00                                            ...

00000083 <__c.2415>:
      83:	41 00                                               A.

00000085 <__c.2412>:
      85:	0d 0a 00                                            ...

00000088 <__c.2405>:
      88:	0d 0a 00                                            ...

0000008b <__c.2398>:
      8b:	0d 0a 00                                            ...

0000008e <__c.2396>:
      8e:	41 00                                               A.

00000090 <__c.2390>:
      90:	4e 42 00                                            NB.

00000093 <__c.2386>:
      93:	0d 0a 00                                            ...

00000096 <__c.2380>:
      96:	0d 0a 00                                            ...

00000099 <__c.2378>:
      99:	41 00                                               A.

0000009b <__c.2371>:
      9b:	4e 42 00                                            NB.

0000009e <__c.2369>:
      9e:	41 00                                               A.

000000a0 <__c.2355>:
      a0:	0d 0a 00                                            ...

000000a3 <__c.2353>:
      a3:	4e 55 00                                            NU.

000000a6 <__c.2337>:
      a6:	0d 0a 00                                            ...

000000a9 <__c.2326>:
      a9:	47 3a 00                                            G:.

000000ac <__c.2277>:
      ac:	0d 0a 00                                            ...

000000af <__c.2275>:
      af:	54 3a 50 69 6c 6c 43 61 70 3a 00                    T:PillCap:.

000000ba <__c.2264>:
      ba:	4e 55 00 00                                         NU..

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf e5       	ldi	r28, 0x5F	; 95
      c4:	d2 e0       	ldi	r29, 0x02	; 2
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <get_mcusr>:

// in case of software reset turn off wdt during initialization
void get_mcusr(void) __attribute__((naked)) __attribute__((section(".init3")));
void get_mcusr(void)
{
	MCUSR = 0;
      ca:	14 be       	out	0x34, r1	; 52
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	a8 95       	wdr
      d2:	81 b5       	in	r24, 0x21	; 33
      d4:	88 61       	ori	r24, 0x18	; 24
      d6:	81 bd       	out	0x21, r24	; 33
      d8:	11 bc       	out	0x21, r1	; 33
      da:	0f be       	out	0x3f, r0	; 63

000000dc <__do_copy_data>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	a0 e6       	ldi	r26, 0x60	; 96
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e2 e5       	ldi	r30, 0x52	; 82
      e4:	f4 e1       	ldi	r31, 0x14	; 20
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 36       	cpi	r26, 0x68	; 104
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	21 e0       	ldi	r18, 0x01	; 1
      f4:	a8 e6       	ldi	r26, 0x68	; 104
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	ae 32       	cpi	r26, 0x2E	; 46
      fe:	b2 07       	cpc	r27, r18
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	cb d5       	rcall	.+2966   	; 0xc9a <main>
     104:	a4 c9       	rjmp	.-3256   	; 0xfffff44e <__eeprom_end+0xff7ef24e>

00000106 <__bad_interrupt>:
     106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <Com_Parse_Error>:

\return	none
***************************************************************/
void Com_Rx_Control_Char(char RxdChar)
{
	NACKU();
     108:	8a eb       	ldi	r24, 0xBA	; 186
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	ed d7       	rcall	.+4058   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     10e:	08 95       	ret

00000110 <Com_Tx_Title>:
\brief Send model, version and serial number to com port

\return	none
***************************************************************/
void Com_Tx_Title(void)
{
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	cf 93       	push	r28
	uint8_t Status;
	Soft_UART_Tx_Const_Message(PSTR("T:PillCap:"));
     11a:	8f ea       	ldi	r24, 0xAF	; 175
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	e4 d7       	rcall	.+4040   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	Soft_UART_Tx_Byte(MAJ_VERSION+0x30);
     120:	80 e3       	ldi	r24, 0x30	; 48
     122:	aa d7       	rcall	.+3924   	; 0x1078 <Soft_UART_Tx_Byte>
	Soft_UART_Tx_Byte('.');
     124:	8e e2       	ldi	r24, 0x2E	; 46
     126:	a8 d7       	rcall	.+3920   	; 0x1078 <Soft_UART_Tx_Byte>
	Soft_UART_Tx_Byte(MIN_VERSION+0x30);
     128:	83 e3       	ldi	r24, 0x33	; 51
     12a:	a6 d7       	rcall	.+3916   	; 0x1078 <Soft_UART_Tx_Byte>
	Soft_UART_Tx_Byte(TER_VERSION+0x30);
     12c:	80 e3       	ldi	r24, 0x30	; 48
     12e:	a4 d7       	rcall	.+3912   	; 0x1078 <Soft_UART_Tx_Byte>
	Soft_UART_Tx_Byte(':');
     130:	8a e3       	ldi	r24, 0x3A	; 58
     132:	a2 d7       	rcall	.+3908   	; 0x1078 <Soft_UART_Tx_Byte>
	if(!GetTotalDoses() || GetTotalDoses()==0xFF)
     134:	e9 d4       	rcall	.+2514   	; 0xb08 <GetTotalDoses>
     136:	88 23       	and	r24, r24
     138:	99 f0       	breq	.+38     	; 0x160 <Com_Tx_Title+0x50>
     13a:	e6 d4       	rcall	.+2508   	; 0xb08 <GetTotalDoses>
     13c:	8f 3f       	cpi	r24, 0xFF	; 255
     13e:	91 f0       	breq	.+36     	; 0x164 <Com_Tx_Title+0x54>
		Status = 4;	// un-programmed
	else if(GetCurrentDose() == GetTotalDoses())
     140:	e7 d4       	rcall	.+2510   	; 0xb10 <GetCurrentDose>
     142:	c8 2f       	mov	r28, r24
     144:	e1 d4       	rcall	.+2498   	; 0xb08 <GetTotalDoses>
     146:	c8 17       	cp	r28, r24
     148:	79 f0       	breq	.+30     	; 0x168 <Com_Tx_Title+0x58>
		Status = 0;	// done
	else if(GetFirstDoseTimeAbs() > GetCurrentTimeAbs())
     14a:	1b d5       	rcall	.+2614   	; 0xb82 <GetFirstDoseTimeAbs>
     14c:	6b 01       	movw	r12, r22
     14e:	7c 01       	movw	r14, r24
     150:	3d d5       	rcall	.+2682   	; 0xbcc <GetCurrentTimeAbs>
     152:	6c 15       	cp	r22, r12
     154:	7d 05       	cpc	r23, r13
     156:	8e 05       	cpc	r24, r14
     158:	9f 05       	cpc	r25, r15
     15a:	40 f0       	brcs	.+16     	; 0x16c <Com_Tx_Title+0x5c>
		Status = 2;	// programmed, not running
	else
		Status = 1;	// running
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	07 c0       	rjmp	.+14     	; 0x16e <Com_Tx_Title+0x5e>
	Soft_UART_Tx_Byte('.');
	Soft_UART_Tx_Byte(MIN_VERSION+0x30);
	Soft_UART_Tx_Byte(TER_VERSION+0x30);
	Soft_UART_Tx_Byte(':');
	if(!GetTotalDoses() || GetTotalDoses()==0xFF)
		Status = 4;	// un-programmed
     160:	84 e0       	ldi	r24, 0x04	; 4
     162:	05 c0       	rjmp	.+10     	; 0x16e <Com_Tx_Title+0x5e>
     164:	84 e0       	ldi	r24, 0x04	; 4
     166:	03 c0       	rjmp	.+6      	; 0x16e <Com_Tx_Title+0x5e>
	else if(GetCurrentDose() == GetTotalDoses())
		Status = 0;	// done
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	01 c0       	rjmp	.+2      	; 0x16e <Com_Tx_Title+0x5e>
	else if(GetFirstDoseTimeAbs() > GetCurrentTimeAbs())
		Status = 2;	// programmed, not running
     16c:	82 e0       	ldi	r24, 0x02	; 2
	else
		Status = 1;	// running
	Soft_UART_Tx_Byte(Status+0x30);
     16e:	80 5d       	subi	r24, 0xD0	; 208
     170:	83 d7       	rcall	.+3846   	; 0x1078 <Soft_UART_Tx_Byte>
	TX_NEWLINE;
     172:	8c ea       	ldi	r24, 0xAC	; 172
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	b8 d7       	rcall	.+3952   	; 0x10e8 <Soft_UART_Tx_Const_Message>
}
     178:	cf 91       	pop	r28
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	df 90       	pop	r13
     180:	cf 90       	pop	r12
     182:	08 95       	ret

00000184 <Com_Get_Parameter>:
		TX_NEWLINE;
	}
}

void Com_Get_Parameter(char *RxdString)
{
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	65 97       	sbiw	r28, 0x15	; 21
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	8c 01       	movw	r16, r24
	char StringBuffer[EE_STRING_LENGTH];
	
	Soft_UART_Tx_Const_Message(PSTR("G:"));
     19e:	89 ea       	ldi	r24, 0xA9	; 169
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	a2 d7       	rcall	.+3908   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	Soft_UART_Tx_Byte(*RxdString);
     1a4:	d8 01       	movw	r26, r16
     1a6:	8c 91       	ld	r24, X
     1a8:	67 d7       	rcall	.+3790   	; 0x1078 <Soft_UART_Tx_Byte>
	Soft_UART_Tx_Byte(':');
     1aa:	8a e3       	ldi	r24, 0x3A	; 58
     1ac:	65 d7       	rcall	.+3786   	; 0x1078 <Soft_UART_Tx_Byte>
	
	switch(RxdString[0])
     1ae:	d8 01       	movw	r26, r16
     1b0:	ec 91       	ld	r30, X
     1b2:	8e 2f       	mov	r24, r30
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	f0 97       	sbiw	r30, 0x30	; 48
     1ba:	e7 30       	cpi	r30, 0x07	; 7
     1bc:	f1 05       	cpc	r31, r1
     1be:	e0 f5       	brcc	.+120    	; 0x238 <Com_Get_Parameter+0xb4>
     1c0:	ef 5e       	subi	r30, 0xEF	; 239
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	09 94       	ijmp
	{
		case '0': eeprom_read_block(StringBuffer, &EEFacility,	EE_STRING_LENGTH);	break;
     1c6:	45 e1       	ldi	r20, 0x15	; 21
     1c8:	50 e0       	ldi	r21, 0x00	; 0
     1ca:	6d e5       	ldi	r22, 0x5D	; 93
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	ce 01       	movw	r24, r28
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	06 d9       	rcall	.-3572   	; 0xfffff3e0 <__eeprom_end+0xff7ef1e0>
     1d4:	32 c0       	rjmp	.+100    	; 0x23a <Com_Get_Parameter+0xb6>
		case '1': eeprom_read_block(StringBuffer, &EEDoctor,	EE_STRING_LENGTH);	break;
     1d6:	45 e1       	ldi	r20, 0x15	; 21
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	68 e4       	ldi	r22, 0x48	; 72
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	fe d8       	rcall	.-3588   	; 0xfffff3e0 <__eeprom_end+0xff7ef1e0>
     1e4:	2a c0       	rjmp	.+84     	; 0x23a <Com_Get_Parameter+0xb6>
		case '2': eeprom_read_block(StringBuffer, &EETreatment,	EE_STRING_LENGTH);	break;
     1e6:	45 e1       	ldi	r20, 0x15	; 21
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	63 e3       	ldi	r22, 0x33	; 51
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	ce 01       	movw	r24, r28
     1f0:	01 96       	adiw	r24, 0x01	; 1
     1f2:	f6 d8       	rcall	.-3604   	; 0xfffff3e0 <__eeprom_end+0xff7ef1e0>
     1f4:	22 c0       	rjmp	.+68     	; 0x23a <Com_Get_Parameter+0xb6>
		case '3': eeprom_read_block(StringBuffer, &EEClient,	EE_STRING_LENGTH);	break;
     1f6:	45 e1       	ldi	r20, 0x15	; 21
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	69 e0       	ldi	r22, 0x09	; 9
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	ee d8       	rcall	.-3620   	; 0xfffff3e0 <__eeprom_end+0xff7ef1e0>
     204:	1a c0       	rjmp	.+52     	; 0x23a <Com_Get_Parameter+0xb6>
		case '4': eeprom_read_block(StringBuffer, &EEPatient,	EE_STRING_LENGTH);	break;
     206:	45 e1       	ldi	r20, 0x15	; 21
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	6e e1       	ldi	r22, 0x1E	; 30
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	e6 d8       	rcall	.-3636   	; 0xfffff3e0 <__eeprom_end+0xff7ef1e0>
     214:	12 c0       	rjmp	.+36     	; 0x23a <Com_Get_Parameter+0xb6>
		case '5': itoa(eeprom_read_word(&EEDosePeriodHours), StringBuffer, 10); break;
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fa d8       	rcall	.-3596   	; 0xfffff410 <__eeprom_end+0xff7ef210>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     21c:	4a e0       	ldi	r20, 0x0A	; 10
     21e:	be 01       	movw	r22, r28
     220:	6f 5f       	subi	r22, 0xFF	; 255
     222:	7f 4f       	sbci	r23, 0xFF	; 255
     224:	7f d8       	rcall	.-3842   	; 0xfffff324 <__eeprom_end+0xff7ef124>
     226:	09 c0       	rjmp	.+18     	; 0x23a <Com_Get_Parameter+0xb6>
		case '6': itoa(GetTotalDoses(), StringBuffer, 10); break;
     228:	6f d4       	rcall	.+2270   	; 0xb08 <GetTotalDoses>
     22a:	4a e0       	ldi	r20, 0x0A	; 10
     22c:	be 01       	movw	r22, r28
     22e:	6f 5f       	subi	r22, 0xFF	; 255
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	77 d8       	rcall	.-3858   	; 0xfffff324 <__eeprom_end+0xff7ef124>
     236:	01 c0       	rjmp	.+2      	; 0x23a <Com_Get_Parameter+0xb6>
		default	: StringBuffer[0] = 0; break;
     238:	19 82       	std	Y+1, r1	; 0x01
	}
	StringBuffer[EE_STRING_LENGTH-1] = 0; // NULL terminate just in case
     23a:	1d 8a       	std	Y+21, r1	; 0x15
	Soft_UART_Tx_Message(StringBuffer); 
     23c:	ce 01       	movw	r24, r28
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	45 d7       	rcall	.+3722   	; 0x10cc <Soft_UART_Tx_Message>
	TX_NEWLINE;
     242:	86 ea       	ldi	r24, 0xA6	; 166
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	50 d7       	rcall	.+3744   	; 0x10e8 <Soft_UART_Tx_Const_Message>
}
     248:	65 96       	adiw	r28, 0x15	; 21
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	08 95       	ret

0000025e <Com_Set_Parameter>:

void Com_Set_Parameter(char *RxdString)
{
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
	uint8_t TempU8;
	uint16_t TempU16;

	TempU8 = strlen(RxdString+1);
     266:	dc 01       	movw	r26, r24
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	fd 01       	movw	r30, r26
     26c:	01 90       	ld	r0, Z+
     26e:	00 20       	and	r0, r0
     270:	e9 f7       	brne	.-6      	; 0x26c <__stack+0xd>
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	4e 2f       	mov	r20, r30
     276:	4a 1b       	sub	r20, r26
     278:	46 31       	cpi	r20, 0x16	; 22
     27a:	08 f0       	brcs	.+2      	; 0x27e <__stack+0x1f>
     27c:	45 e1       	ldi	r20, 0x15	; 21
	if(TempU8 > EE_STRING_LENGTH)
		TempU8 = EE_STRING_LENGTH;

	switch(RxdString[0])
     27e:	ec 01       	movw	r28, r24
     280:	e8 81       	ld	r30, Y
     282:	0e 2f       	mov	r16, r30
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	f8 01       	movw	r30, r16
     288:	f0 97       	sbiw	r30, 0x30	; 48
     28a:	e7 30       	cpi	r30, 0x07	; 7
     28c:	f1 05       	cpc	r31, r1
     28e:	08 f0       	brcs	.+2      	; 0x292 <__stack+0x33>
     290:	6d c0       	rjmp	.+218    	; 0x36c <__stack+0x10d>
     292:	e8 5e       	subi	r30, 0xE8	; 232
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	09 94       	ijmp
	{
		case '0': eeprom_write_block((RxdString+1), &EEFacility, TempU8); break;
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	6d e5       	ldi	r22, 0x5D	; 93
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	cd 01       	movw	r24, r26
     2a0:	bc d8       	rcall	.-3720   	; 0xfffff41a <__eeprom_end+0xff7ef21a>
     2a2:	6a c0       	rjmp	.+212    	; 0x378 <__stack+0x119>
		case '1': eeprom_write_block((RxdString+1), &EEDoctor, TempU8); break;
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	68 e4       	ldi	r22, 0x48	; 72
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cd 01       	movw	r24, r26
     2ac:	b6 d8       	rcall	.-3732   	; 0xfffff41a <__eeprom_end+0xff7ef21a>
     2ae:	64 c0       	rjmp	.+200    	; 0x378 <__stack+0x119>
		case '2': eeprom_write_block((RxdString+1), &EETreatment, TempU8); break;
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	63 e3       	ldi	r22, 0x33	; 51
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	cd 01       	movw	r24, r26
     2b8:	b0 d8       	rcall	.-3744   	; 0xfffff41a <__eeprom_end+0xff7ef21a>
     2ba:	5e c0       	rjmp	.+188    	; 0x378 <__stack+0x119>
		case '3': eeprom_write_block((RxdString+1), &EEClient, TempU8); break;
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	69 e0       	ldi	r22, 0x09	; 9
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	cd 01       	movw	r24, r26
     2c4:	aa d8       	rcall	.-3756   	; 0xfffff41a <__eeprom_end+0xff7ef21a>
     2c6:	58 c0       	rjmp	.+176    	; 0x378 <__stack+0x119>
		case '4': eeprom_write_block((RxdString+1), &EEPatient, TempU8); break;
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	6e e1       	ldi	r22, 0x1E	; 30
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	cd 01       	movw	r24, r26
     2d0:	a4 d8       	rcall	.-3768   	; 0xfffff41a <__eeprom_end+0xff7ef21a>
     2d2:	52 c0       	rjmp	.+164    	; 0x378 <__stack+0x119>
		case '5': 
				TempU16 = (uint16_t)atoi(RxdString+1); 
     2d4:	cd 01       	movw	r24, r26
     2d6:	e2 d7       	rcall	.+4036   	; 0x129c <atoi>
     2d8:	8c 01       	movw	r16, r24
				eeprom_write_word(&EEDosePeriodHours, TempU16);	// Stored in EEPROM in hours
     2da:	bc 01       	movw	r22, r24
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	b3 d8       	rcall	.-3738   	; 0xfffff448 <__eeprom_end+0xff7ef248>
				SetDosePeriodSecs(3600ul * TempU16);			// Stored in RAM in seconds
     2e2:	c8 01       	movw	r24, r16
     2e4:	a0 e0       	ldi	r26, 0x00	; 0
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	ac 01       	movw	r20, r24
     2ea:	bd 01       	movw	r22, r26
     2ec:	44 0f       	add	r20, r20
     2ee:	55 1f       	adc	r21, r21
     2f0:	66 1f       	adc	r22, r22
     2f2:	77 1f       	adc	r23, r23
     2f4:	44 0f       	add	r20, r20
     2f6:	55 1f       	adc	r21, r21
     2f8:	66 1f       	adc	r22, r22
     2fa:	77 1f       	adc	r23, r23
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	66 1f       	adc	r22, r22
     302:	77 1f       	adc	r23, r23
     304:	48 1b       	sub	r20, r24
     306:	59 0b       	sbc	r21, r25
     308:	6a 0b       	sbc	r22, r26
     30a:	7b 0b       	sbc	r23, r27
     30c:	44 0f       	add	r20, r20
     30e:	55 1f       	adc	r21, r21
     310:	66 1f       	adc	r22, r22
     312:	77 1f       	adc	r23, r23
     314:	44 0f       	add	r20, r20
     316:	55 1f       	adc	r21, r21
     318:	66 1f       	adc	r22, r22
     31a:	77 1f       	adc	r23, r23
     31c:	44 0f       	add	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	66 1f       	adc	r22, r22
     322:	77 1f       	adc	r23, r23
     324:	44 0f       	add	r20, r20
     326:	55 1f       	adc	r21, r21
     328:	66 1f       	adc	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	66 1f       	adc	r22, r22
     332:	77 1f       	adc	r23, r23
     334:	84 0f       	add	r24, r20
     336:	95 1f       	adc	r25, r21
     338:	a6 1f       	adc	r26, r22
     33a:	b7 1f       	adc	r27, r23
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	aa 1f       	adc	r26, r26
     342:	bb 1f       	adc	r27, r27
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	aa 1f       	adc	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	bc 01       	movw	r22, r24
     34e:	cd 01       	movw	r24, r26
     350:	66 0f       	add	r22, r22
     352:	77 1f       	adc	r23, r23
     354:	88 1f       	adc	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	66 0f       	add	r22, r22
     35a:	77 1f       	adc	r23, r23
     35c:	88 1f       	adc	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	f8 d2       	rcall	.+1520   	; 0x952 <SetDosePeriodSecs>
		break;
     362:	0a c0       	rjmp	.+20     	; 0x378 <__stack+0x119>
		case '6': SetTotalDoses((uint8_t)atoi(RxdString+1)); break;
     364:	cd 01       	movw	r24, r26
     366:	9a d7       	rcall	.+3892   	; 0x129c <atoi>
     368:	e3 d3       	rcall	.+1990   	; 0xb30 <SetTotalDoses>
     36a:	06 c0       	rjmp	.+12     	; 0x378 <__stack+0x119>
		default: NACKU(); TX_NEWLINE; break;
     36c:	83 ea       	ldi	r24, 0xA3	; 163
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	bb d6       	rcall	.+3446   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     372:	80 ea       	ldi	r24, 0xA0	; 160
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	b8 d6       	rcall	.+3440   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	}
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <BCD2Hex>:

uint8_t BCD2Hex(const uint8_t BCDHexValue)
{
	return (BCDHexValue/16) * 10 + (BCDHexValue & 0x0F);
     382:	98 2f       	mov	r25, r24
     384:	92 95       	swap	r25
     386:	9f 70       	andi	r25, 0x0F	; 15
     388:	29 2f       	mov	r18, r25
     38a:	22 0f       	add	r18, r18
     38c:	22 0f       	add	r18, r18
     38e:	92 0f       	add	r25, r18
     390:	99 0f       	add	r25, r25
     392:	8f 70       	andi	r24, 0x0F	; 15
}
     394:	89 0f       	add	r24, r25
     396:	08 95       	ret

00000398 <Com_Parse_String>:
checks to see if command has been enabled
\param ParseString string containing command to be parsed
\return	none
***************************************************************/
void Com_Parse_String(char* ParseString)
{
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	ae 97       	sbiw	r28, 0x2e	; 46
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	8c 01       	movw	r16, r24
	char ToABuffer[UINT_2_A_SIZE];
	char StringBuffer[RX0_BUFFER_SIZE];
	uint8_t i, TempU8;
	uint32_t TempU32;

	ComTimer = COM_TIMER_RELOAD_60_SECS; // received complete command, reload timer
     3be:	8c e3       	ldi	r24, 0x3C	; 60
     3c0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <ComTimer>
	
	switch(toupper(ParseString[0]))
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 81       	ld	r24, Z
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a4 d7       	rcall	.+3912   	; 0x1314 <toupper>
     3cc:	81 54       	subi	r24, 0x41	; 65
     3ce:	91 09       	sbc	r25, r1
     3d0:	84 31       	cpi	r24, 0x14	; 20
     3d2:	91 05       	cpc	r25, r1
     3d4:	08 f0       	brcs	.+2      	; 0x3d8 <Com_Parse_String+0x40>
     3d6:	cf c1       	rjmp	.+926    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
     3d8:	81 5e       	subi	r24, 0xE1	; 225
     3da:	9f 4f       	sbci	r25, 0xFF	; 255
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	08 95       	ret
//		case '6': break;
//		case '7': break;
//		case '8': break;
//		case '9': break;
		case 'A': 
			if(ParseString[1] == 'R') 
     3e2:	f8 01       	movw	r30, r16
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
     3e6:	82 35       	cpi	r24, 0x52	; 82
     3e8:	71 f4       	brne	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			{
				TempU32 = GetDosePeriodSecs();
     3ea:	bc d2       	rcall	.+1400   	; 0x964 <GetDosePeriodSecs>
				SetDosePeriodSecs(TempU32/3600);
     3ec:	20 e1       	ldi	r18, 0x10	; 16
     3ee:	3e e0       	ldi	r19, 0x0E	; 14
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	31 d7       	rcall	.+3682   	; 0x1258 <__udivmodsi4>
     3f6:	ca 01       	movw	r24, r20
     3f8:	b9 01       	movw	r22, r18
     3fa:	ab d2       	rcall	.+1366   	; 0x952 <SetDosePeriodSecs>
				CalcNextDoseTimes();
     3fc:	bc d2       	rcall	.+1400   	; 0x976 <CalcNextDoseTimes>
				ACK();
     3fe:	8e e9       	ldi	r24, 0x9E	; 158
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	72 d6       	rcall	.+3300   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     404:	be c1       	rjmp	.+892    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
			} 
			else
				NACKB();
     406:	8b e9       	ldi	r24, 0x9B	; 155
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	6e d6       	rcall	.+3292   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     40c:	ba c1       	rjmp	.+884    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     40e:	f8 01       	movw	r30, r16
     410:	de 01       	movw	r26, r28
     412:	17 96       	adiw	r26, 0x07	; 7
     414:	9e 01       	movw	r18, r28
     416:	22 5f       	subi	r18, 0xF2	; 242
     418:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
		case 'B': 
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
				StringBuffer[i] = (ParseString[3*i + 2]-0x30)*16 + ParseString[3*i + 3]-0x30;
     41a:	82 81       	ldd	r24, Z+2	; 0x02
     41c:	98 2f       	mov	r25, r24
     41e:	92 95       	swap	r25
     420:	90 7f       	andi	r25, 0xF0	; 240
     422:	83 81       	ldd	r24, Z+3	; 0x03
     424:	80 53       	subi	r24, 0x30	; 48
     426:	89 0f       	add	r24, r25
     428:	8d 93       	st	X+, r24
     42a:	33 96       	adiw	r30, 0x03	; 3
			} 
			else
				NACKB();
		break;
		case 'B': 
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
     42c:	a2 17       	cp	r26, r18
     42e:	b3 07       	cpc	r27, r19
     430:	a1 f7       	brne	.-24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				StringBuffer[i] = (ParseString[3*i + 2]-0x30)*16 + ParseString[3*i + 3]-0x30;
			PCF85063_Write(PCF85063_ADDR_SECONDS, PCF85063_TIME_LENGTH, (uint8_t*)StringBuffer); // write time
     432:	ae 01       	movw	r20, r28
     434:	49 5f       	subi	r20, 0xF9	; 249
     436:	5f 4f       	sbci	r21, 0xFF	; 255
     438:	67 e0       	ldi	r22, 0x07	; 7
     43a:	84 e2       	ldi	r24, 0x24	; 36
     43c:	e8 d3       	rcall	.+2000   	; 0xc0e <PCF85063_Write>
			ACK();
     43e:	89 e9       	ldi	r24, 0x99	; 153
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	52 d6       	rcall	.+3236   	; 0x10e8 <Soft_UART_Tx_Const_Message>
			TX_NEWLINE;
     444:	86 e9       	ldi	r24, 0x96	; 150
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	4f d6       	rcall	.+3230   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     44a:	9b c1       	rjmp	.+822    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'C': 
			PCF85063_Read(PCF85063_ADDR_SECONDS, PCF85063_TIME_LENGTH, (uint8_t*)StringBuffer); // read time
     44c:	ae 01       	movw	r20, r28
     44e:	49 5f       	subi	r20, 0xF9	; 249
     450:	5f 4f       	sbci	r21, 0xFF	; 255
     452:	67 e0       	ldi	r22, 0x07	; 7
     454:	84 e2       	ldi	r24, 0x24	; 36
     456:	fc d3       	rcall	.+2040   	; 0xc50 <PCF85063_Read>
			Soft_UART_Tx_Byte('C');
     458:	83 e4       	ldi	r24, 0x43	; 67
     45a:	0e d6       	rcall	.+3100   	; 0x1078 <Soft_UART_Tx_Byte>
     45c:	8e 01       	movw	r16, r28
     45e:	09 5f       	subi	r16, 0xF9	; 249
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	6e 01       	movw	r12, r28
     464:	fe e0       	ldi	r31, 0x0E	; 14
     466:	cf 0e       	add	r12, r31
     468:	d1 1c       	adc	r13, r1
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
			{
				TempU8 = BCD2Hex(StringBuffer[i]);
     46a:	f8 01       	movw	r30, r16
     46c:	81 91       	ld	r24, Z+
     46e:	8f 01       	movw	r16, r30
     470:	88 df       	rcall	.-240    	; 0x382 <BCD2Hex>
     472:	f8 2e       	mov	r15, r24
				Soft_UART_Tx_Byte(':');
     474:	8a e3       	ldi	r24, 0x3A	; 58
     476:	00 d6       	rcall	.+3072   	; 0x1078 <Soft_UART_Tx_Byte>
     478:	4a e0       	ldi	r20, 0x0A	; 10
     47a:	be 01       	movw	r22, r28
     47c:	6f 5f       	subi	r22, 0xFF	; 255
     47e:	7f 4f       	sbci	r23, 0xFF	; 255
     480:	8f 2d       	mov	r24, r15
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	4f d7       	rcall	.+3742   	; 0x1324 <__itoa_ncheck>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
     486:	f9 e0       	ldi	r31, 0x09	; 9
     488:	ff 15       	cp	r31, r15
     48a:	10 f0       	brcs	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
					Soft_UART_Tx_Byte('0');
     48c:	80 e3       	ldi	r24, 0x30	; 48
     48e:	f4 d5       	rcall	.+3048   	; 0x1078 <Soft_UART_Tx_Byte>
				Soft_UART_Tx_Message(ToABuffer);
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	1b d6       	rcall	.+3126   	; 0x10cc <Soft_UART_Tx_Message>
			TX_NEWLINE;
		break;
		case 'C': 
			PCF85063_Read(PCF85063_ADDR_SECONDS, PCF85063_TIME_LENGTH, (uint8_t*)StringBuffer); // read time
			Soft_UART_Tx_Byte('C');
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
     496:	0c 15       	cp	r16, r12
     498:	1d 05       	cpc	r17, r13
     49a:	39 f7       	brne	.-50     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
					Soft_UART_Tx_Byte('0');
				Soft_UART_Tx_Message(ToABuffer);
			}
			TX_NEWLINE;
     49c:	83 e9       	ldi	r24, 0x93	; 147
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	23 d6       	rcall	.+3142   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     4a2:	6f c1       	rjmp	.+734    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
	uint16_t i = 0;
	uint8_t j;
	uint8_t TempByte;
	char ToABuffer[UCHAR_2_A_SIZE];
	
	Soft_UART_Tx_Const_Message(PSTR("D:"));
     4a4:	87 e7       	ldi	r24, 0x77	; 119
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	1f d6       	rcall	.+3134   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	utoa(GetCurrentDose(), ToABuffer, 10);
     4aa:	32 d3       	rcall	.+1636   	; 0xb10 <GetCurrentDose>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     4ac:	4a e0       	ldi	r20, 0x0A	; 10
     4ae:	be 01       	movw	r22, r28
     4b0:	69 5d       	subi	r22, 0xD9	; 217
     4b2:	7f 4f       	sbci	r23, 0xFF	; 255
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	6b d7       	rcall	.+3798   	; 0x138e <__utoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     4b8:	ce 01       	movw	r24, r28
     4ba:	87 96       	adiw	r24, 0x27	; 39
     4bc:	07 d6       	rcall	.+3086   	; 0x10cc <Soft_UART_Tx_Message>
	TX_NEWLINE;
     4be:	84 e7       	ldi	r24, 0x74	; 116
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	12 d6       	rcall	.+3108   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	}
}*/

static void Com_Output_Data(void)
{
	uint16_t i = 0;
     4c4:	c1 2c       	mov	r12, r1
     4c6:	d1 2c       	mov	r13, r1
     4c8:	23 c0       	rjmp	.+70     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>

	while(i < GetCurrentDose()*4)
	{
		for(j=0;j<4;j++)
		{
			if(i < EE_DATA_STORAGE_LENGTH)
     4ca:	8c e8       	ldi	r24, 0x8C	; 140
     4cc:	c8 16       	cp	r12, r24
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	d8 06       	cpc	r13, r24
     4d2:	18 f4       	brcc	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				TempByte = eeprom_read_byte(EEDataStorage+i+j);
     4d4:	c7 01       	movw	r24, r14
     4d6:	94 d7       	rcall	.+3880   	; 0x1400 <eeprom_read_byte>
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			else
				TempByte = RAMDataStorage[i-EE_DATA_STORAGE_LENGTH+j];
     4da:	f8 01       	movw	r30, r16
     4dc:	80 81       	ld	r24, Z
     4de:	40 e1       	ldi	r20, 0x10	; 16
     4e0:	be 01       	movw	r22, r28
     4e2:	69 5d       	subi	r22, 0xD9	; 217
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	52 d7       	rcall	.+3748   	; 0x138e <__utoa_ncheck>
			utoa(TempByte, ToABuffer, 16);
			Soft_UART_Tx_Message(ToABuffer);
     4ea:	ce 01       	movw	r24, r28
     4ec:	87 96       	adiw	r24, 0x27	; 39
     4ee:	ee d5       	rcall	.+3036   	; 0x10cc <Soft_UART_Tx_Message>
			Soft_UART_Tx_Byte(':');
     4f0:	8a e3       	ldi	r24, 0x3A	; 58
     4f2:	c2 d5       	rcall	.+2948   	; 0x1078 <Soft_UART_Tx_Byte>
     4f4:	ff ef       	ldi	r31, 0xFF	; 255
     4f6:	ef 1a       	sub	r14, r31
     4f8:	ff 0a       	sbc	r15, r31
     4fa:	0f 5f       	subi	r16, 0xFF	; 255
     4fc:	1f 4f       	sbci	r17, 0xFF	; 255
	Soft_UART_Tx_Message(ToABuffer);
	TX_NEWLINE;

	while(i < GetCurrentDose()*4)
	{
		for(j=0;j<4;j++)
     4fe:	0a 15       	cp	r16, r10
     500:	1b 05       	cpc	r17, r11
     502:	19 f7       	brne	.-58     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				TempByte = RAMDataStorage[i-EE_DATA_STORAGE_LENGTH+j];
			utoa(TempByte, ToABuffer, 16);
			Soft_UART_Tx_Message(ToABuffer);
			Soft_UART_Tx_Byte(':');
		}
		i += 4;
     504:	84 e0       	ldi	r24, 0x04	; 4
     506:	c8 0e       	add	r12, r24
     508:	d1 1c       	adc	r13, r1
		TX_NEWLINE;
     50a:	81 e7       	ldi	r24, 0x71	; 113
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ec d5       	rcall	.+3032   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	Soft_UART_Tx_Const_Message(PSTR("D:"));
	utoa(GetCurrentDose(), ToABuffer, 10);
	Soft_UART_Tx_Message(ToABuffer);
	TX_NEWLINE;

	while(i < GetCurrentDose()*4)
     510:	ff d2       	rcall	.+1534   	; 0xb10 <GetCurrentDose>
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	c8 16       	cp	r12, r24
     51e:	d9 06       	cpc	r13, r25
     520:	08 f0       	brcs	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	2f c1       	rjmp	.+606    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     524:	f6 01       	movw	r30, r12
     526:	ec 58       	subi	r30, 0x8C	; 140
     528:	ff 4f       	sbci	r31, 0xFF	; 255
     52a:	7f 01       	movw	r14, r30
     52c:	86 01       	movw	r16, r12
     52e:	02 5b       	subi	r16, 0xB2	; 178
     530:	10 40       	sbci	r17, 0x00	; 0
     532:	c6 01       	movw	r24, r12
     534:	8e 5a       	subi	r24, 0xAE	; 174
     536:	90 40       	sbci	r25, 0x00	; 0
     538:	5c 01       	movw	r10, r24
     53a:	c7 cf       	rjmp	.-114    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				Soft_UART_Tx_Message(ToABuffer);
			}
			TX_NEWLINE;
		break;
		case 'D': Com_Output_Data(); break;
		case 'E': if(ParseString[1] == 'R') Erase_EEPROM(); else {NACKB();} break;
     53c:	f8 01       	movw	r30, r16
     53e:	81 81       	ldd	r24, Z+1	; 0x01
     540:	82 35       	cpi	r24, 0x52	; 82
     542:	61 f5       	brne	.+88     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>

static void Erase_EEPROM(void)
{
	uint16_t i, BatteryDateAddress;

	BatteryDateAddress = ((uint16_t)&EEBatStartDate) & 0x01FF;
     544:	02 e0       	ldi	r16, 0x02	; 2
     546:	10 e0       	ldi	r17, 0x00	; 0
     548:	11 70       	andi	r17, 0x01	; 1
	if(BatteryDateAddress)
     54a:	01 15       	cp	r16, r1
     54c:	11 05       	cpc	r17, r1
     54e:	59 f0       	breq	.+22     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     550:	e1 2c       	mov	r14, r1
     552:	f1 2c       	mov	r15, r1
	{
		for(i=0; i<BatteryDateAddress; i++)
			eeprom_write_byte((uint8_t *)i, 0x00);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	c7 01       	movw	r24, r14
     558:	69 d7       	rcall	.+3794   	; 0x142c <eeprom_write_byte>
	uint16_t i, BatteryDateAddress;

	BatteryDateAddress = ((uint16_t)&EEBatStartDate) & 0x01FF;
	if(BatteryDateAddress)
	{
		for(i=0; i<BatteryDateAddress; i++)
     55a:	ff ef       	ldi	r31, 0xFF	; 255
     55c:	ef 1a       	sub	r14, r31
     55e:	ff 0a       	sbc	r15, r31
     560:	0e 15       	cp	r16, r14
     562:	1f 05       	cpc	r17, r15
     564:	b9 f7       	brne	.-18     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			eeprom_write_byte((uint8_t *)i, 0x00);
	}
	for(i=BatteryDateAddress+PCF85063_TIME_LENGTH; i<EEPROM_SIZE; i++)	
     566:	09 5f       	subi	r16, 0xF9	; 249
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	05 c0       	rjmp	.+10     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
		eeprom_write_byte((uint8_t *)i, 0x00);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	c8 01       	movw	r24, r16
     570:	5d d7       	rcall	.+3770   	; 0x142c <eeprom_write_byte>
	if(BatteryDateAddress)
	{
		for(i=0; i<BatteryDateAddress; i++)
			eeprom_write_byte((uint8_t *)i, 0x00);
	}
	for(i=BatteryDateAddress+PCF85063_TIME_LENGTH; i<EEPROM_SIZE; i++)	
     572:	0f 5f       	subi	r16, 0xFF	; 255
     574:	1f 4f       	sbci	r17, 0xFF	; 255
     576:	01 15       	cp	r16, r1
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	18 07       	cpc	r17, r24
     57c:	b8 f3       	brcs	.-18     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		eeprom_write_byte((uint8_t *)i, 0x00);

	ACK();TX_NEWLINE;
     57e:	8f e6       	ldi	r24, 0x6F	; 111
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	b2 d5       	rcall	.+2916   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     584:	8c e6       	ldi	r24, 0x6C	; 108
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	af d5       	rcall	.+2910   	; 0x10e8 <Soft_UART_Tx_Const_Message>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     58a:	98 e0       	ldi	r25, 0x08	; 8
     58c:	88 e1       	ldi	r24, 0x18	; 24
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	a8 95       	wdr
     594:	81 bd       	out	0x21, r24	; 33
     596:	0f be       	out	0x3f, r0	; 63
     598:	91 bd       	out	0x21, r25	; 33
     59a:	ff cf       	rjmp	.-2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
				Soft_UART_Tx_Message(ToABuffer);
			}
			TX_NEWLINE;
		break;
		case 'D': Com_Output_Data(); break;
		case 'E': if(ParseString[1] == 'R') Erase_EEPROM(); else {NACKB();} break;
     59c:	80 e9       	ldi	r24, 0x90	; 144
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a3 d5       	rcall	.+2886   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     5a2:	ef c0       	rjmp	.+478    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     5a4:	f8 01       	movw	r30, r16
     5a6:	de 01       	movw	r26, r28
     5a8:	17 96       	adiw	r26, 0x07	; 7
     5aa:	9e 01       	movw	r18, r28
     5ac:	22 5f       	subi	r18, 0xF2	; 242
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
		case 'F': // first dose time
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
				StringBuffer[i] = (ParseString[3*i + 2]-0x30)*16 + ParseString[3*i + 3]-0x30;
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	98 2f       	mov	r25, r24
     5b4:	92 95       	swap	r25
     5b6:	90 7f       	andi	r25, 0xF0	; 240
     5b8:	83 81       	ldd	r24, Z+3	; 0x03
     5ba:	80 53       	subi	r24, 0x30	; 48
     5bc:	89 0f       	add	r24, r25
     5be:	8d 93       	st	X+, r24
     5c0:	33 96       	adiw	r30, 0x03	; 3
			TX_NEWLINE;
		break;
		case 'D': Com_Output_Data(); break;
		case 'E': if(ParseString[1] == 'R') Erase_EEPROM(); else {NACKB();} break;
		case 'F': // first dose time
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
     5c2:	2a 17       	cp	r18, r26
     5c4:	3b 07       	cpc	r19, r27
     5c6:	a1 f7       	brne	.-24     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
				StringBuffer[i] = (ParseString[3*i + 2]-0x30)*16 + ParseString[3*i + 3]-0x30;
			SetFirstDoseTime((uint8_t*)StringBuffer); // write time
     5c8:	ce 01       	movw	r24, r28
     5ca:	07 96       	adiw	r24, 0x07	; 7
     5cc:	ba d2       	rcall	.+1396   	; 0xb42 <SetFirstDoseTime>
			ACK();
     5ce:	8e e8       	ldi	r24, 0x8E	; 142
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	8a d5       	rcall	.+2836   	; 0x10e8 <Soft_UART_Tx_Const_Message>
			TX_NEWLINE;
     5d4:	8b e8       	ldi	r24, 0x8B	; 139
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	87 d5       	rcall	.+2830   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     5da:	d3 c0       	rjmp	.+422    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'G': Com_Get_Parameter(ParseString+1); break;
     5dc:	c8 01       	movw	r24, r16
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	d1 dd       	rcall	.-1118   	; 0x184 <Com_Get_Parameter>
     5e2:	cf c0       	rjmp	.+414    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'H': 
			GetFirstDoseTime((uint8_t*)StringBuffer); // read time
     5e4:	ce 01       	movw	r24, r28
     5e6:	07 96       	adiw	r24, 0x07	; 7
     5e8:	c1 d2       	rcall	.+1410   	; 0xb6c <GetFirstDoseTime>
			Soft_UART_Tx_Byte('H');
     5ea:	88 e4       	ldi	r24, 0x48	; 72
     5ec:	45 d5       	rcall	.+2698   	; 0x1078 <Soft_UART_Tx_Byte>
     5ee:	8e 01       	movw	r16, r28
     5f0:	09 5f       	subi	r16, 0xF9	; 249
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255
     5f4:	6e 01       	movw	r12, r28
     5f6:	9e e0       	ldi	r25, 0x0E	; 14
     5f8:	c9 0e       	add	r12, r25
     5fa:	d1 1c       	adc	r13, r1
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
			{
				TempU8 = BCD2Hex(StringBuffer[i]);
     5fc:	f8 01       	movw	r30, r16
     5fe:	81 91       	ld	r24, Z+
     600:	8f 01       	movw	r16, r30
     602:	bf de       	rcall	.-642    	; 0x382 <BCD2Hex>
     604:	f8 2e       	mov	r15, r24
				Soft_UART_Tx_Byte(':');
     606:	8a e3       	ldi	r24, 0x3A	; 58
     608:	37 d5       	rcall	.+2670   	; 0x1078 <Soft_UART_Tx_Byte>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     60a:	4a e0       	ldi	r20, 0x0A	; 10
     60c:	be 01       	movw	r22, r28
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	8f 2d       	mov	r24, r15
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	86 d6       	rcall	.+3340   	; 0x1324 <__itoa_ncheck>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	ff 15       	cp	r31, r15
     61c:	10 f0       	brcs	.+4      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
					Soft_UART_Tx_Byte('0');
     61e:	80 e3       	ldi	r24, 0x30	; 48
     620:	2b d5       	rcall	.+2646   	; 0x1078 <Soft_UART_Tx_Byte>
				Soft_UART_Tx_Message(ToABuffer);
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	52 d5       	rcall	.+2724   	; 0x10cc <Soft_UART_Tx_Message>
		break;
		case 'G': Com_Get_Parameter(ParseString+1); break;
		case 'H': 
			GetFirstDoseTime((uint8_t*)StringBuffer); // read time
			Soft_UART_Tx_Byte('H');
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
     628:	0c 15       	cp	r16, r12
     62a:	1d 05       	cpc	r17, r13
     62c:	39 f7       	brne	.-50     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
					Soft_UART_Tx_Byte('0');
				Soft_UART_Tx_Message(ToABuffer);
			}
			TX_NEWLINE;
     62e:	88 e8       	ldi	r24, 0x88	; 136
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	5a d5       	rcall	.+2740   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     634:	a6 c0       	rjmp	.+332    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'I': StartTreatment(); break;
     636:	d3 d2       	rcall	.+1446   	; 0xbde <StartTreatment>
     638:	a4 c0       	rjmp	.+328    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
//		case 'J': break;
//		case 'K': break;
//		case 'L': break;
		case 'M':  
			eeprom_read_block(StringBuffer, &EEBatStartDate, PCF85063_TIME_LENGTH);	
     63a:	47 e0       	ldi	r20, 0x07	; 7
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	62 e0       	ldi	r22, 0x02	; 2
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	ce 01       	movw	r24, r28
     644:	07 96       	adiw	r24, 0x07	; 7
     646:	cc d6       	rcall	.+3480   	; 0x13e0 <eeprom_read_block>
			Soft_UART_Tx_Byte('M');
     648:	8d e4       	ldi	r24, 0x4D	; 77
     64a:	16 d5       	rcall	.+2604   	; 0x1078 <Soft_UART_Tx_Byte>
     64c:	8e 01       	movw	r16, r28
     64e:	09 5f       	subi	r16, 0xF9	; 249
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	6e 01       	movw	r12, r28
     654:	8e e0       	ldi	r24, 0x0E	; 14
     656:	c8 0e       	add	r12, r24
     658:	d1 1c       	adc	r13, r1
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
			{
				TempU8 = BCD2Hex(StringBuffer[i]);
     65a:	f8 01       	movw	r30, r16
     65c:	81 91       	ld	r24, Z+
     65e:	8f 01       	movw	r16, r30
     660:	90 de       	rcall	.-736    	; 0x382 <BCD2Hex>
     662:	f8 2e       	mov	r15, r24
				Soft_UART_Tx_Byte(':');
     664:	8a e3       	ldi	r24, 0x3A	; 58
     666:	08 d5       	rcall	.+2576   	; 0x1078 <Soft_UART_Tx_Byte>
     668:	4a e0       	ldi	r20, 0x0A	; 10
     66a:	be 01       	movw	r22, r28
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	8f 2d       	mov	r24, r15
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	57 d6       	rcall	.+3246   	; 0x1324 <__itoa_ncheck>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
     676:	f9 e0       	ldi	r31, 0x09	; 9
     678:	ff 15       	cp	r31, r15
     67a:	10 f0       	brcs	.+4      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
					Soft_UART_Tx_Byte('0');
     67c:	80 e3       	ldi	r24, 0x30	; 48
     67e:	fc d4       	rcall	.+2552   	; 0x1078 <Soft_UART_Tx_Byte>
				Soft_UART_Tx_Message(ToABuffer);
     680:	ce 01       	movw	r24, r28
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	23 d5       	rcall	.+2630   	; 0x10cc <Soft_UART_Tx_Message>
//		case 'K': break;
//		case 'L': break;
		case 'M':  
			eeprom_read_block(StringBuffer, &EEBatStartDate, PCF85063_TIME_LENGTH);	
			Soft_UART_Tx_Byte('M');
			for(i=0; i<PCF85063_TIME_LENGTH; i++)
     686:	c0 16       	cp	r12, r16
     688:	d1 06       	cpc	r13, r17
     68a:	39 f7       	brne	.-50     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				itoa(TempU8, ToABuffer, 10);
				if(TempU8 < 10)
					Soft_UART_Tx_Byte('0');
				Soft_UART_Tx_Message(ToABuffer);
			}
			TX_NEWLINE;
     68c:	85 e8       	ldi	r24, 0x85	; 133
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2b d5       	rcall	.+2646   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     692:	77 c0       	rjmp	.+238    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'N': 
			PCF85063_Read(PCF85063_ADDR_SECONDS, PCF85063_TIME_LENGTH, (uint8_t*)StringBuffer); // read time
     694:	ae 01       	movw	r20, r28
     696:	49 5f       	subi	r20, 0xF9	; 249
     698:	5f 4f       	sbci	r21, 0xFF	; 255
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	84 e2       	ldi	r24, 0x24	; 36
     69e:	d8 d2       	rcall	.+1456   	; 0xc50 <PCF85063_Read>
			StringBuffer[0] &= 0x7F;	// clear OS bit
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	8f 77       	andi	r24, 0x7F	; 127
     6a4:	8f 83       	std	Y+7, r24	; 0x07
			eeprom_write_block(StringBuffer, &EEBatStartDate, PCF85063_TIME_LENGTH);
     6a6:	47 e0       	ldi	r20, 0x07	; 7
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	ce 01       	movw	r24, r28
     6b0:	07 96       	adiw	r24, 0x07	; 7
     6b2:	b3 d6       	rcall	.+3430   	; 0x141a <eeprom_write_block>
			ACK();TX_NEWLINE;
     6b4:	83 e8       	ldi	r24, 0x83	; 131
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	17 d5       	rcall	.+2606   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     6ba:	80 e8       	ldi	r24, 0x80	; 128
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	14 d5       	rcall	.+2600   	; 0x10e8 <Soft_UART_Tx_Const_Message>
		break;
     6c0:	60 c0       	rjmp	.+192    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
***************************************************************/
static void Com_Tx_Status(void)
{
	char ToABuffer[ULONG_2_A_SIZE];

	Soft_UART_Tx_Const_Message(PSTR("P:"));
     6c2:	89 e6       	ldi	r24, 0x69	; 105
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	10 d5       	rcall	.+2592   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	utoa(DoseReady(), ToABuffer, 10);
     6c8:	e7 d1       	rcall	.+974    	; 0xa98 <DoseReady>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     6ca:	4a e0       	ldi	r20, 0x0A	; 10
     6cc:	be 01       	movw	r22, r28
     6ce:	69 5d       	subi	r22, 0xD9	; 217
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	5c d6       	rcall	.+3256   	; 0x138e <__utoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     6d6:	ce 01       	movw	r24, r28
     6d8:	87 96       	adiw	r24, 0x27	; 39
     6da:	f8 d4       	rcall	.+2544   	; 0x10cc <Soft_UART_Tx_Message>

	Soft_UART_Tx_Byte(':');
     6dc:	8a e3       	ldi	r24, 0x3A	; 58
     6de:	cc d4       	rcall	.+2456   	; 0x1078 <Soft_UART_Tx_Byte>
	utoa(GetCurrentDose(), ToABuffer, 10);
     6e0:	17 d2       	rcall	.+1070   	; 0xb10 <GetCurrentDose>
     6e2:	4a e0       	ldi	r20, 0x0A	; 10
     6e4:	be 01       	movw	r22, r28
     6e6:	69 5d       	subi	r22, 0xD9	; 217
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	50 d6       	rcall	.+3232   	; 0x138e <__utoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     6ee:	ce 01       	movw	r24, r28
     6f0:	87 96       	adiw	r24, 0x27	; 39
     6f2:	ec d4       	rcall	.+2520   	; 0x10cc <Soft_UART_Tx_Message>
	
	Soft_UART_Tx_Byte(':');
     6f4:	8a e3       	ldi	r24, 0x3A	; 58
     6f6:	c0 d4       	rcall	.+2432   	; 0x1078 <Soft_UART_Tx_Byte>
	ultoa(GetFirstDoseTimeAbs(), ToABuffer, 10);
     6f8:	44 d2       	rcall	.+1160   	; 0xb82 <GetFirstDoseTimeAbs>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
     6fa:	2a e0       	ldi	r18, 0x0A	; 10
     6fc:	ae 01       	movw	r20, r28
     6fe:	49 5d       	subi	r20, 0xD9	; 217
     700:	5f 4f       	sbci	r21, 0xFF	; 255
     702:	24 d6       	rcall	.+3144   	; 0x134c <__ultoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     704:	ce 01       	movw	r24, r28
     706:	87 96       	adiw	r24, 0x27	; 39
     708:	e1 d4       	rcall	.+2498   	; 0x10cc <Soft_UART_Tx_Message>
	
	Soft_UART_Tx_Byte(':');
     70a:	8a e3       	ldi	r24, 0x3A	; 58
     70c:	b5 d4       	rcall	.+2410   	; 0x1078 <Soft_UART_Tx_Byte>
	ultoa(GetDosePeriodSecs(), ToABuffer, 10);
     70e:	2a d1       	rcall	.+596    	; 0x964 <GetDosePeriodSecs>
     710:	2a e0       	ldi	r18, 0x0A	; 10
     712:	ae 01       	movw	r20, r28
     714:	49 5d       	subi	r20, 0xD9	; 217
     716:	5f 4f       	sbci	r21, 0xFF	; 255
     718:	19 d6       	rcall	.+3122   	; 0x134c <__ultoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);                  
     71a:	ce 01       	movw	r24, r28
     71c:	87 96       	adiw	r24, 0x27	; 39
     71e:	d6 d4       	rcall	.+2476   	; 0x10cc <Soft_UART_Tx_Message>
	
	Soft_UART_Tx_Byte(':');
     720:	8a e3       	ldi	r24, 0x3A	; 58
     722:	aa d4       	rcall	.+2388   	; 0x1078 <Soft_UART_Tx_Byte>
	ultoa(GetCurrentTimeAbs(), ToABuffer, 10);
     724:	53 d2       	rcall	.+1190   	; 0xbcc <GetCurrentTimeAbs>
     726:	2a e0       	ldi	r18, 0x0A	; 10
     728:	ae 01       	movw	r20, r28
     72a:	49 5d       	subi	r20, 0xD9	; 217
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	0e d6       	rcall	.+3100   	; 0x134c <__ultoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     730:	ce 01       	movw	r24, r28
     732:	87 96       	adiw	r24, 0x27	; 39
     734:	cb d4       	rcall	.+2454   	; 0x10cc <Soft_UART_Tx_Message>
	
	Soft_UART_Tx_Byte(':');
     736:	8a e3       	ldi	r24, 0x3A	; 58
     738:	9f d4       	rcall	.+2366   	; 0x1078 <Soft_UART_Tx_Byte>
	ultoa(GetDoseReadyTime(), ToABuffer, 10);
     73a:	a5 d1       	rcall	.+842    	; 0xa86 <GetDoseReadyTime>
     73c:	2a e0       	ldi	r18, 0x0A	; 10
     73e:	ae 01       	movw	r20, r28
     740:	49 5d       	subi	r20, 0xD9	; 217
     742:	5f 4f       	sbci	r21, 0xFF	; 255
     744:	03 d6       	rcall	.+3078   	; 0x134c <__ultoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     746:	ce 01       	movw	r24, r28
     748:	87 96       	adiw	r24, 0x27	; 39
     74a:	c0 d4       	rcall	.+2432   	; 0x10cc <Soft_UART_Tx_Message>
	
	Soft_UART_Tx_Byte(':');
     74c:	8a e3       	ldi	r24, 0x3A	; 58
     74e:	94 d4       	rcall	.+2344   	; 0x1078 <Soft_UART_Tx_Byte>
	ultoa(GetDoseExpireTime(), ToABuffer, 10);
     750:	91 d1       	rcall	.+802    	; 0xa74 <GetDoseExpireTime>
     752:	2a e0       	ldi	r18, 0x0A	; 10
     754:	ae 01       	movw	r20, r28
     756:	49 5d       	subi	r20, 0xD9	; 217
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	f8 d5       	rcall	.+3056   	; 0x134c <__ultoa_ncheck>
	Soft_UART_Tx_Message(ToABuffer);
     75c:	ce 01       	movw	r24, r28
     75e:	87 96       	adiw	r24, 0x27	; 39
     760:	b5 d4       	rcall	.+2410   	; 0x10cc <Soft_UART_Tx_Message>
	TX_NEWLINE;
     762:	86 e6       	ldi	r24, 0x66	; 102
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	c0 d4       	rcall	.+2432   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     768:	0c c0       	rjmp	.+24     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
				if(StringBuffer[i] < 0x10)
					Soft_UART_Tx_Byte('0');
				Soft_UART_Tx_Message(ToABuffer);
			}
		break;	*/	
		case 'S': Com_Set_Parameter(ParseString+1); break;
     76a:	c8 01       	movw	r24, r16
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	77 dd       	rcall	.-1298   	; 0x25e <Com_Set_Parameter>
     770:	08 c0       	rjmp	.+16     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		case 'T': Com_Tx_Title(); break;
     772:	ce dc       	rcall	.-1636   	; 0x110 <Com_Tx_Title>
     774:	06 c0       	rjmp	.+12     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
		break;*/
//		case 'X': Tasks |= DO_RTC_TASK; break;
//		case 'Y': Power_Down(); break;
//		case 'Z': Soft_UART_Tx_Const_Message(PSTR("Z:BaseStation:0.00\r\n")); 
		break;
		default: NACKU(); TX_NEWLINE; break;
     776:	8d e7       	ldi	r24, 0x7D	; 125
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	b6 d4       	rcall	.+2412   	; 0x10e8 <Soft_UART_Tx_Const_Message>
     77c:	8a e7       	ldi	r24, 0x7A	; 122
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	b3 d4       	rcall	.+2406   	; 0x10e8 <Soft_UART_Tx_Const_Message>
	}
}
     782:	ae 96       	adiw	r28, 0x2e	; 46
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	08 95       	ret

000007a4 <CalcAbsoluteTime>:
uint8_t FirstDoseTime[PCF85063_TIME_LENGTH];
uint32_t FirstDoseTimeAbs = 0;

// Calculate seconds since Jan 1 2014, 00:00:00
uint32_t CalcAbsoluteTime(uint8_t* TimeArray)
{
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	27 97       	sbiw	r28, 0x07	; 7
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	ac 01       	movw	r20, r24
     7be:	e0 e6       	ldi	r30, 0x60	; 96
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	67 e6       	ldi	r22, 0x67	; 103
     7ca:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t i;
	uint8_t TimeDifferenceArray[PCF85063_TIME_LENGTH];
	uint32_t RetVal;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
		TimeDifferenceArray[i] = (TimeArray[i]/16) * 10 + (TimeArray[i] & 0x0F) - TIME_ZERO[i];
     7cc:	da 01       	movw	r26, r20
     7ce:	9d 91       	ld	r25, X+
     7d0:	ad 01       	movw	r20, r26
     7d2:	81 91       	ld	r24, Z+
     7d4:	29 2f       	mov	r18, r25
     7d6:	2f 70       	andi	r18, 0x0F	; 15
     7d8:	28 1b       	sub	r18, r24
     7da:	92 95       	swap	r25
     7dc:	9f 70       	andi	r25, 0x0F	; 15
     7de:	89 2f       	mov	r24, r25
     7e0:	88 0f       	add	r24, r24
     7e2:	88 0f       	add	r24, r24
     7e4:	98 0f       	add	r25, r24
     7e6:	99 0f       	add	r25, r25
     7e8:	92 0f       	add	r25, r18
     7ea:	d8 01       	movw	r26, r16
     7ec:	9d 93       	st	X+, r25
     7ee:	8d 01       	movw	r16, r26
{
	uint8_t i;
	uint8_t TimeDifferenceArray[PCF85063_TIME_LENGTH];
	uint32_t RetVal;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
     7f0:	e6 17       	cp	r30, r22
     7f2:	f7 07       	cpc	r31, r23
     7f4:	59 f7       	brne	.-42     	; 0x7cc <CalcAbsoluteTime+0x28>
		TimeDifferenceArray[i] = (TimeArray[i]/16) * 10 + (TimeArray[i] & 0x0F) - TIME_ZERO[i];

	RetVal = (uint32_t)TimeDifferenceArray[6];		// years
	RetVal = RetVal * 12ul + (uint32_t)TimeDifferenceArray[5];	// months per year + months
     7f6:	8f 81       	ldd	r24, Y+7	; 0x07
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	a0 e0       	ldi	r26, 0x00	; 0
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	ac 01       	movw	r20, r24
     800:	bd 01       	movw	r22, r26
     802:	44 0f       	add	r20, r20
     804:	55 1f       	adc	r21, r21
     806:	66 1f       	adc	r22, r22
     808:	77 1f       	adc	r23, r23
     80a:	84 0f       	add	r24, r20
     80c:	95 1f       	adc	r25, r21
     80e:	a6 1f       	adc	r26, r22
     810:	b7 1f       	adc	r27, r23
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	aa 1f       	adc	r26, r26
     818:	bb 1f       	adc	r27, r27
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	aa 1f       	adc	r26, r26
     820:	bb 1f       	adc	r27, r27
	RetVal = RetVal * 30ul + (uint32_t)TimeDifferenceArray[3];	// days per month + days
     822:	2e 81       	ldd	r18, Y+6	; 0x06
     824:	82 0f       	add	r24, r18
     826:	91 1d       	adc	r25, r1
     828:	a1 1d       	adc	r26, r1
     82a:	b1 1d       	adc	r27, r1
     82c:	ac 01       	movw	r20, r24
     82e:	bd 01       	movw	r22, r26
     830:	44 0f       	add	r20, r20
     832:	55 1f       	adc	r21, r21
     834:	66 1f       	adc	r22, r22
     836:	77 1f       	adc	r23, r23
     838:	84 0f       	add	r24, r20
     83a:	95 1f       	adc	r25, r21
     83c:	a6 1f       	adc	r26, r22
     83e:	b7 1f       	adc	r27, r23
     840:	ac 01       	movw	r20, r24
     842:	bd 01       	movw	r22, r26
     844:	44 0f       	add	r20, r20
     846:	55 1f       	adc	r21, r21
     848:	66 1f       	adc	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	44 0f       	add	r20, r20
     84e:	55 1f       	adc	r21, r21
     850:	66 1f       	adc	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	84 0f       	add	r24, r20
     856:	95 1f       	adc	r25, r21
     858:	a6 1f       	adc	r26, r22
     85a:	b7 1f       	adc	r27, r23
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	aa 1f       	adc	r26, r26
     862:	bb 1f       	adc	r27, r27
	RetVal = RetVal * 24ul + (uint32_t)TimeDifferenceArray[2];	// hours per day + hours
     864:	2c 81       	ldd	r18, Y+4	; 0x04
     866:	82 0f       	add	r24, r18
     868:	91 1d       	adc	r25, r1
     86a:	a1 1d       	adc	r26, r1
     86c:	b1 1d       	adc	r27, r1
     86e:	ac 01       	movw	r20, r24
     870:	bd 01       	movw	r22, r26
     872:	44 0f       	add	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	66 1f       	adc	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	84 0f       	add	r24, r20
     87c:	95 1f       	adc	r25, r21
     87e:	a6 1f       	adc	r26, r22
     880:	b7 1f       	adc	r27, r23
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	aa 1f       	adc	r26, r26
     888:	bb 1f       	adc	r27, r27
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	aa 1f       	adc	r26, r26
     890:	bb 1f       	adc	r27, r27
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
	RetVal = RetVal * 60ul + (uint32_t)TimeDifferenceArray[1];	// minutes per hour + minutes
     89a:	2b 81       	ldd	r18, Y+3	; 0x03
     89c:	82 0f       	add	r24, r18
     89e:	91 1d       	adc	r25, r1
     8a0:	a1 1d       	adc	r26, r1
     8a2:	b1 1d       	adc	r27, r1
     8a4:	ac 01       	movw	r20, r24
     8a6:	bd 01       	movw	r22, r26
     8a8:	44 0f       	add	r20, r20
     8aa:	55 1f       	adc	r21, r21
     8ac:	66 1f       	adc	r22, r22
     8ae:	77 1f       	adc	r23, r23
     8b0:	84 0f       	add	r24, r20
     8b2:	95 1f       	adc	r25, r21
     8b4:	a6 1f       	adc	r26, r22
     8b6:	b7 1f       	adc	r27, r23
     8b8:	ac 01       	movw	r20, r24
     8ba:	bd 01       	movw	r22, r26
     8bc:	44 0f       	add	r20, r20
     8be:	55 1f       	adc	r21, r21
     8c0:	66 1f       	adc	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	66 1f       	adc	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	84 0f       	add	r24, r20
     8ce:	95 1f       	adc	r25, r21
     8d0:	a6 1f       	adc	r26, r22
     8d2:	b7 1f       	adc	r27, r23
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	aa 1f       	adc	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	aa 1f       	adc	r26, r26
     8e2:	bb 1f       	adc	r27, r27
	RetVal = RetVal * 60ul + (uint32_t)TimeDifferenceArray[0];	// seconds per minute + second
     8e4:	2a 81       	ldd	r18, Y+2	; 0x02
     8e6:	82 0f       	add	r24, r18
     8e8:	91 1d       	adc	r25, r1
     8ea:	a1 1d       	adc	r26, r1
     8ec:	b1 1d       	adc	r27, r1
     8ee:	ac 01       	movw	r20, r24
     8f0:	bd 01       	movw	r22, r26
     8f2:	44 0f       	add	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	66 1f       	adc	r22, r22
     8f8:	77 1f       	adc	r23, r23
     8fa:	84 0f       	add	r24, r20
     8fc:	95 1f       	adc	r25, r21
     8fe:	a6 1f       	adc	r26, r22
     900:	b7 1f       	adc	r27, r23
     902:	ac 01       	movw	r20, r24
     904:	bd 01       	movw	r22, r26
     906:	44 0f       	add	r20, r20
     908:	55 1f       	adc	r21, r21
     90a:	66 1f       	adc	r22, r22
     90c:	77 1f       	adc	r23, r23
     90e:	44 0f       	add	r20, r20
     910:	55 1f       	adc	r21, r21
     912:	66 1f       	adc	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	84 0f       	add	r24, r20
     918:	95 1f       	adc	r25, r21
     91a:	a6 1f       	adc	r26, r22
     91c:	b7 1f       	adc	r27, r23
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	aa 1f       	adc	r26, r26
     924:	bb 1f       	adc	r27, r27
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	aa 1f       	adc	r26, r26
     92c:	bb 1f       	adc	r27, r27
     92e:	29 81       	ldd	r18, Y+1	; 0x01
     930:	bc 01       	movw	r22, r24
     932:	cd 01       	movw	r24, r26
     934:	62 0f       	add	r22, r18
     936:	71 1d       	adc	r23, r1
     938:	81 1d       	adc	r24, r1
     93a:	91 1d       	adc	r25, r1

	return RetVal;
}
     93c:	27 96       	adiw	r28, 0x07	; 7
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	08 95       	ret

00000952 <SetDosePeriodSecs>:

void SetDosePeriodSecs(uint32_t DosePeriodSet)
{
	DosePeriodSecs = DosePeriodSet;
     952:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <DosePeriodSecs>
     956:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <DosePeriodSecs+0x1>
     95a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <DosePeriodSecs+0x2>
     95e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <DosePeriodSecs+0x3>
     962:	08 95       	ret

00000964 <GetDosePeriodSecs>:
}

uint32_t GetDosePeriodSecs(void)
{
	return DosePeriodSecs;
     964:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <DosePeriodSecs>
     968:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <DosePeriodSecs+0x1>
     96c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <DosePeriodSecs+0x2>
     970:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <DosePeriodSecs+0x3>
}
     974:	08 95       	ret

00000976 <CalcNextDoseTimes>:

void CalcNextDoseTimes(void)
{
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
	DoseReadyTimeAbs = FirstDoseTimeAbs + eeprom_read_byte(&EEDoseCounter)*DosePeriodSecs;
     982:	83 e7       	ldi	r24, 0x73	; 115
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	3c d5       	rcall	.+2680   	; 0x1400 <eeprom_read_byte>
     988:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <DosePeriodSecs>
     98c:	d0 90 6d 00 	lds	r13, 0x006D	; 0x80006d <DosePeriodSecs+0x1>
     990:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <DosePeriodSecs+0x2>
     994:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <DosePeriodSecs+0x3>
     998:	68 2f       	mov	r22, r24
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a7 01       	movw	r20, r14
     9a2:	96 01       	movw	r18, r12
     9a4:	40 d4       	rcall	.+2176   	; 0x1226 <__mulsi3>
     9a6:	00 91 68 00 	lds	r16, 0x0068	; 0x800068 <__data_end>
     9aa:	10 91 69 00 	lds	r17, 0x0069	; 0x800069 <__data_end+0x1>
     9ae:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end+0x2>
     9b2:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x3>
     9b6:	ab 01       	movw	r20, r22
     9b8:	bc 01       	movw	r22, r24
     9ba:	40 0f       	add	r20, r16
     9bc:	51 1f       	adc	r21, r17
     9be:	62 1f       	adc	r22, r18
     9c0:	73 1f       	adc	r23, r19
     9c2:	40 93 be 00 	sts	0x00BE, r20	; 0x8000be <DoseReadyTimeAbs>
     9c6:	50 93 bf 00 	sts	0x00BF, r21	; 0x8000bf <DoseReadyTimeAbs+0x1>
     9ca:	60 93 c0 00 	sts	0x00C0, r22	; 0x8000c0 <DoseReadyTimeAbs+0x2>
     9ce:	70 93 c1 00 	sts	0x00C1, r23	; 0x8000c1 <DoseReadyTimeAbs+0x3>
	DoseExpireTimeAbs = DoseReadyTimeAbs + (DosePeriodSecs*85)/256;	
     9d2:	97 01       	movw	r18, r14
     9d4:	86 01       	movw	r16, r12
     9d6:	00 0f       	add	r16, r16
     9d8:	11 1f       	adc	r17, r17
     9da:	22 1f       	adc	r18, r18
     9dc:	33 1f       	adc	r19, r19
     9de:	00 0f       	add	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	22 1f       	adc	r18, r18
     9e4:	33 1f       	adc	r19, r19
     9e6:	d9 01       	movw	r26, r18
     9e8:	c8 01       	movw	r24, r16
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	aa 1f       	adc	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	aa 1f       	adc	r26, r26
     9f8:	bb 1f       	adc	r27, r27
     9fa:	80 0f       	add	r24, r16
     9fc:	91 1f       	adc	r25, r17
     9fe:	a2 1f       	adc	r26, r18
     a00:	b3 1f       	adc	r27, r19
     a02:	8c 0d       	add	r24, r12
     a04:	9d 1d       	adc	r25, r13
     a06:	ae 1d       	adc	r26, r14
     a08:	bf 1d       	adc	r27, r15
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	aa 1f       	adc	r26, r26
     a10:	bb 1f       	adc	r27, r27
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	aa 1f       	adc	r26, r26
     a18:	bb 1f       	adc	r27, r27
     a1a:	c8 0e       	add	r12, r24
     a1c:	d9 1e       	adc	r13, r25
     a1e:	ea 1e       	adc	r14, r26
     a20:	fb 1e       	adc	r15, r27
     a22:	cd 2c       	mov	r12, r13
     a24:	de 2c       	mov	r13, r14
     a26:	ef 2c       	mov	r14, r15
     a28:	ff 24       	eor	r15, r15
     a2a:	c4 0e       	add	r12, r20
     a2c:	d5 1e       	adc	r13, r21
     a2e:	e6 1e       	adc	r14, r22
     a30:	f7 1e       	adc	r15, r23
     a32:	c0 92 d4 00 	sts	0x00D4, r12	; 0x8000d4 <DoseExpireTimeAbs>
     a36:	d0 92 d5 00 	sts	0x00D5, r13	; 0x8000d5 <DoseExpireTimeAbs+0x1>
     a3a:	e0 92 d6 00 	sts	0x00D6, r14	; 0x8000d6 <DoseExpireTimeAbs+0x2>
     a3e:	f0 92 d7 00 	sts	0x00D7, r15	; 0x8000d7 <DoseExpireTimeAbs+0x3>
}
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <SetDoseTaken>:

// mark as taken, update counter and calculate next dose times
void SetDoseTaken(void)
{
     a50:	cf 93       	push	r28
	uint8_t TempU8;
	
	TempU8 = eeprom_read_byte(&EEDoseCounter);
     a52:	83 e7       	ldi	r24, 0x73	; 115
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	d4 d4       	rcall	.+2472   	; 0x1400 <eeprom_read_byte>
     a58:	c8 2f       	mov	r28, r24
	if(TempU8 < eeprom_read_byte(&EEDoseCount))
     a5a:	82 e7       	ldi	r24, 0x72	; 114
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	d0 d4       	rcall	.+2464   	; 0x1400 <eeprom_read_byte>
     a60:	c8 17       	cp	r28, r24
     a62:	28 f4       	brcc	.+10     	; 0xa6e <SetDoseTaken+0x1e>
		eeprom_write_byte(&EEDoseCounter, TempU8+1);
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	6c 0f       	add	r22, r28
     a68:	83 e7       	ldi	r24, 0x73	; 115
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	df d4       	rcall	.+2494   	; 0x142c <eeprom_write_byte>
	CalcNextDoseTimes();
     a6e:	83 df       	rcall	.-250    	; 0x976 <CalcNextDoseTimes>
}
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <GetDoseExpireTime>:

uint32_t GetDoseExpireTime(void)
{
	return DoseExpireTimeAbs;
     a74:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <DoseExpireTimeAbs>
     a78:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <DoseExpireTimeAbs+0x1>
     a7c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <DoseExpireTimeAbs+0x2>
     a80:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <DoseExpireTimeAbs+0x3>
}
     a84:	08 95       	ret

00000a86 <GetDoseReadyTime>:

uint32_t GetDoseReadyTime(void)
{
	return DoseReadyTimeAbs;
     a86:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <DoseReadyTimeAbs>
     a8a:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <DoseReadyTimeAbs+0x1>
     a8e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <DoseReadyTimeAbs+0x2>
     a92:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <DoseReadyTimeAbs+0x3>
}
     a96:	08 95       	ret

00000a98 <DoseReady>:

// Check to see if current absolute time is between dose available time and expiration time
// and dose not taken
uint8_t DoseReady(void)
{
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	00 91 c2 00 	lds	r16, 0x00C2	; 0x8000c2 <CurrentTimeAbs>
     aa2:	10 91 c3 00 	lds	r17, 0x00C3	; 0x8000c3 <CurrentTimeAbs+0x1>
     aa6:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <CurrentTimeAbs+0x2>
     aaa:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <CurrentTimeAbs+0x3>
     aae:	40 91 be 00 	lds	r20, 0x00BE	; 0x8000be <DoseReadyTimeAbs>
     ab2:	50 91 bf 00 	lds	r21, 0x00BF	; 0x8000bf <DoseReadyTimeAbs+0x1>
     ab6:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <DoseReadyTimeAbs+0x2>
     aba:	70 91 c1 00 	lds	r23, 0x00C1	; 0x8000c1 <DoseReadyTimeAbs+0x3>
     abe:	40 17       	cp	r20, r16
     ac0:	51 07       	cpc	r21, r17
     ac2:	62 07       	cpc	r22, r18
     ac4:	73 07       	cpc	r23, r19
     ac6:	08 f0       	brcs	.+2      	; 0xaca <DoseReady+0x32>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
	if(CurrentTimeAbs > DoseReadyTimeAbs)
		return TRUE;
	else
		return FALSE;
}
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <DoseMissed>:

uint8_t DoseMissed(void)
{
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	00 91 c2 00 	lds	r16, 0x00C2	; 0x8000c2 <CurrentTimeAbs>
     ada:	10 91 c3 00 	lds	r17, 0x00C3	; 0x8000c3 <CurrentTimeAbs+0x1>
     ade:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <CurrentTimeAbs+0x2>
     ae2:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <CurrentTimeAbs+0x3>
     ae6:	40 91 d4 00 	lds	r20, 0x00D4	; 0x8000d4 <DoseExpireTimeAbs>
     aea:	50 91 d5 00 	lds	r21, 0x00D5	; 0x8000d5 <DoseExpireTimeAbs+0x1>
     aee:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <DoseExpireTimeAbs+0x2>
     af2:	70 91 d7 00 	lds	r23, 0x00D7	; 0x8000d7 <DoseExpireTimeAbs+0x3>
     af6:	40 17       	cp	r20, r16
     af8:	51 07       	cpc	r21, r17
     afa:	62 07       	cpc	r22, r18
     afc:	73 07       	cpc	r23, r19
     afe:	08 f0       	brcs	.+2      	; 0xb02 <DoseMissed+0x32>
     b00:	80 e0       	ldi	r24, 0x00	; 0
	if(CurrentTimeAbs > DoseExpireTimeAbs)
		return TRUE;
	else
		return FALSE;
}
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <GetTotalDoses>:

uint8_t GetTotalDoses(void)
{
	return eeprom_read_byte(&EEDoseCount);
     b08:	82 e7       	ldi	r24, 0x72	; 114
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	79 d4       	rcall	.+2290   	; 0x1400 <eeprom_read_byte>
}
     b0e:	08 95       	ret

00000b10 <GetCurrentDose>:

uint8_t GetCurrentDose(void)
{
	return eeprom_read_byte(&EEDoseCounter);
     b10:	83 e7       	ldi	r24, 0x73	; 115
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	75 d4       	rcall	.+2282   	; 0x1400 <eeprom_read_byte>
}
     b16:	08 95       	ret

00000b18 <GetDosesRemaining>:

uint8_t GetDosesRemaining(void)
{
     b18:	cf 93       	push	r28
	return eeprom_read_byte(&EEDoseCount) - eeprom_read_byte(&EEDoseCounter);
     b1a:	82 e7       	ldi	r24, 0x72	; 114
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	70 d4       	rcall	.+2272   	; 0x1400 <eeprom_read_byte>
     b20:	c8 2f       	mov	r28, r24
     b22:	83 e7       	ldi	r24, 0x73	; 115
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	6c d4       	rcall	.+2264   	; 0x1400 <eeprom_read_byte>
}
     b28:	c8 1b       	sub	r28, r24
     b2a:	8c 2f       	mov	r24, r28
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <SetTotalDoses>:

void SetTotalDoses(uint8_t SetDoses)
{
	eeprom_write_byte(&EEDoseCount, SetDoses);
     b30:	68 2f       	mov	r22, r24
     b32:	82 e7       	ldi	r24, 0x72	; 114
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	7a d4       	rcall	.+2292   	; 0x142c <eeprom_write_byte>
	eeprom_write_byte(&EEDoseCounter, 0);
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	83 e7       	ldi	r24, 0x73	; 115
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	76 d4       	rcall	.+2284   	; 0x142c <eeprom_write_byte>
     b40:	08 95       	ret

00000b42 <SetFirstDoseTime>:
}

void SetFirstDoseTime(uint8_t* DoseTime)
{
     b42:	a8 2f       	mov	r26, r24
     b44:	b9 2f       	mov	r27, r25
     b46:	e6 ec       	ldi	r30, 0xC6	; 198
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	4d ec       	ldi	r20, 0xCD	; 205
     b4c:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t i;
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
		FirstDoseTime[i] = DoseTime[i];
     b4e:	2d 91       	ld	r18, X+
     b50:	21 93       	st	Z+, r18
}

void SetFirstDoseTime(uint8_t* DoseTime)
{
	uint8_t i;
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
     b52:	e4 17       	cp	r30, r20
     b54:	f5 07       	cpc	r31, r21
     b56:	d9 f7       	brne	.-10     	; 0xb4e <SetFirstDoseTime+0xc>
		FirstDoseTime[i] = DoseTime[i];
	FirstDoseTimeAbs = CalcAbsoluteTime(DoseTime);
     b58:	25 de       	rcall	.-950    	; 0x7a4 <CalcAbsoluteTime>
     b5a:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
     b5e:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
     b62:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end+0x2>
     b66:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x3>
     b6a:	08 95       	ret

00000b6c <GetFirstDoseTime>:
}

void GetFirstDoseTime(uint8_t* TimeArray)
{
     b6c:	e6 ec       	ldi	r30, 0xC6	; 198
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	dc 01       	movw	r26, r24
     b72:	2d ec       	ldi	r18, 0xCD	; 205
     b74:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
		TimeArray[i] = FirstDoseTime[i];
     b76:	81 91       	ld	r24, Z+
     b78:	8d 93       	st	X+, r24

void GetFirstDoseTime(uint8_t* TimeArray)
{
	uint8_t i;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
     b7a:	e2 17       	cp	r30, r18
     b7c:	f3 07       	cpc	r31, r19
     b7e:	d9 f7       	brne	.-10     	; 0xb76 <GetFirstDoseTime+0xa>
		TimeArray[i] = FirstDoseTime[i];
}
     b80:	08 95       	ret

00000b82 <GetFirstDoseTimeAbs>:

uint32_t GetFirstDoseTimeAbs(void)
{
	return FirstDoseTimeAbs;
     b82:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     b86:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x1>
     b8a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
     b8e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x3>
}
     b92:	08 95       	ret

00000b94 <UpdateCurrentTime>:

// Get current time in seconds
void UpdateCurrentTime(void)
{
	PCF85063_Read(PCF85063_ADDR_SECONDS, PCF85063_TIME_LENGTH, CurrentTime); // read all time
     b94:	4d ec       	ldi	r20, 0xCD	; 205
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	67 e0       	ldi	r22, 0x07	; 7
     b9a:	84 e2       	ldi	r24, 0x24	; 36
     b9c:	59 d0       	rcall	.+178    	; 0xc50 <PCF85063_Read>
	CurrentTimeAbs = CalcAbsoluteTime(CurrentTime);
     b9e:	8d ec       	ldi	r24, 0xCD	; 205
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	00 de       	rcall	.-1024   	; 0x7a4 <CalcAbsoluteTime>
     ba4:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <CurrentTimeAbs>
     ba8:	70 93 c3 00 	sts	0x00C3, r23	; 0x8000c3 <CurrentTimeAbs+0x1>
     bac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <CurrentTimeAbs+0x2>
     bb0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <CurrentTimeAbs+0x3>
     bb4:	08 95       	ret

00000bb6 <GetCurrentTime>:
}

void GetCurrentTime(uint8_t* TimeArray)
{
     bb6:	ed ec       	ldi	r30, 0xCD	; 205
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	dc 01       	movw	r26, r24
     bbc:	24 ed       	ldi	r18, 0xD4	; 212
     bbe:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
		TimeArray[i] = CurrentTime[i];
     bc0:	81 91       	ld	r24, Z+
     bc2:	8d 93       	st	X+, r24

void GetCurrentTime(uint8_t* TimeArray)
{
	uint8_t i;
	
	for(i=0; i<PCF85063_TIME_LENGTH; i++)
     bc4:	e2 17       	cp	r30, r18
     bc6:	f3 07       	cpc	r31, r19
     bc8:	d9 f7       	brne	.-10     	; 0xbc0 <GetCurrentTime+0xa>
		TimeArray[i] = CurrentTime[i];
}
     bca:	08 95       	ret

00000bcc <GetCurrentTimeAbs>:

uint32_t GetCurrentTimeAbs(void)
{
	return CurrentTimeAbs;
     bcc:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <CurrentTimeAbs>
     bd0:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <CurrentTimeAbs+0x1>
     bd4:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <CurrentTimeAbs+0x2>
     bd8:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <CurrentTimeAbs+0x3>
}
     bdc:	08 95       	ret

00000bde <StartTreatment>:

void StartTreatment(void)
{
	IgnoreButton = TRUE;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <IgnoreButton>
	TreatmentStarted = TRUE;
     be4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <TreatmentStarted>
	CalcNextDoseTimes();	
     be8:	c6 de       	rcall	.-628    	; 0x976 <CalcNextDoseTimes>
     bea:	08 95       	ret

00000bec <PCF85063_Setup>:

#define READ_NOT_WRITE	0x80

void PCF85063_Setup(void)
{
	PCF85063_CS_PORT |= PCF85063_CS_PIN;
     bec:	da 9a       	sbi	0x1b, 2	; 27
	Soft_Microwire_Write_Byte(PCF85063_ADDR_CONTROL_1);	// Address
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	94 d1       	rcall	.+808    	; 0xf1a <Soft_Microwire_Write_Byte>
	Soft_Microwire_Write_Byte(0x01);				// Control_1: 12.5 pf Caps, 24HR, 
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	92 d1       	rcall	.+804    	; 0xf1a <Soft_Microwire_Write_Byte>
	Soft_Microwire_Write_Byte(0x0F);				// Control_2: No Alarms or Min INT, No ClkOut
     bf6:	8f e0       	ldi	r24, 0x0F	; 15
     bf8:	90 d1       	rcall	.+800    	; 0xf1a <Soft_Microwire_Write_Byte>
	PCF85063_CS_PORT &= ~PCF85063_CS_PIN;
     bfa:	da 98       	cbi	0x1b, 2	; 27

	PCF85063_CS_PORT |= PCF85063_CS_PIN;
     bfc:	da 9a       	sbi	0x1b, 2	; 27
	Soft_Microwire_Write_Byte(PCF85063_ADDR_TIMER_VALUE);// Address
     bfe:	80 e3       	ldi	r24, 0x30	; 48
     c00:	8c d1       	rcall	.+792    	; 0xf1a <Soft_Microwire_Write_Byte>
	Soft_Microwire_Write_Byte(PCF85063_INTERVAL_SECS);// Timer Interrupt in seconds
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	8a d1       	rcall	.+788    	; 0xf1a <Soft_Microwire_Write_Byte>
	Soft_Microwire_Write_Byte(0x17);				// Timer Mode: Second counter, enabled, INT enabled, Generates pulse
     c06:	87 e1       	ldi	r24, 0x17	; 23
     c08:	88 d1       	rcall	.+784    	; 0xf1a <Soft_Microwire_Write_Byte>
	PCF85063_CS_PORT &= ~PCF85063_CS_PIN;
     c0a:	da 98       	cbi	0x1b, 2	; 27
     c0c:	08 95       	ret

00000c0e <PCF85063_Write>:
}

void PCF85063_Write(PCF85063_register_t Address, uint8_t Length, uint8_t* DataArray)
{
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	16 2f       	mov	r17, r22
     c1c:	7a 01       	movw	r14, r20
	uint8_t i;

	PCF85063_CS_PORT |= PCF85063_CS_PIN;
     c1e:	da 9a       	sbi	0x1b, 2	; 27
	Soft_Microwire_Write_Byte(Address);	// Address
     c20:	7c d1       	rcall	.+760    	; 0xf1a <Soft_Microwire_Write_Byte>
	for(i=0; i<Length; i++)
     c22:	11 23       	and	r17, r17
     c24:	69 f0       	breq	.+26     	; 0xc40 <PCF85063_Write+0x32>
     c26:	e7 01       	movw	r28, r14
     c28:	11 50       	subi	r17, 0x01	; 1
     c2a:	01 2f       	mov	r16, r17
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	0f 5f       	subi	r16, 0xFF	; 255
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	0e 0d       	add	r16, r14
     c34:	1f 1d       	adc	r17, r15
		Soft_Microwire_Write_Byte(DataArray[i]);				
     c36:	89 91       	ld	r24, Y+
     c38:	70 d1       	rcall	.+736    	; 0xf1a <Soft_Microwire_Write_Byte>
{
	uint8_t i;

	PCF85063_CS_PORT |= PCF85063_CS_PIN;
	Soft_Microwire_Write_Byte(Address);	// Address
	for(i=0; i<Length; i++)
     c3a:	c0 17       	cp	r28, r16
     c3c:	d1 07       	cpc	r29, r17
     c3e:	d9 f7       	brne	.-10     	; 0xc36 <PCF85063_Write+0x28>
		Soft_Microwire_Write_Byte(DataArray[i]);				
	PCF85063_CS_PORT &= ~PCF85063_CS_PIN;
     c40:	da 98       	cbi	0x1b, 2	; 27
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <PCF85063_Read>:

void PCF85063_Read(PCF85063_register_t Address, uint8_t Length, uint8_t* DataArray)
{
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	06 2f       	mov	r16, r22
     c5e:	7a 01       	movw	r14, r20
	uint8_t i;

	PCF85063_CS_PORT |= PCF85063_CS_PIN;
     c60:	da 9a       	sbi	0x1b, 2	; 27
	Soft_Microwire_Write_Byte(READ_NOT_WRITE|Address);	// Address
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	5a d1       	rcall	.+692    	; 0xf1a <Soft_Microwire_Write_Byte>
	for(i=0; i<Length; i++)
     c66:	00 23       	and	r16, r16
     c68:	61 f0       	breq	.+24     	; 0xc82 <PCF85063_Read+0x32>
     c6a:	e7 01       	movw	r28, r14
     c6c:	01 50       	subi	r16, 0x01	; 1
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	0f 5f       	subi	r16, 0xFF	; 255
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	0e 0d       	add	r16, r14
     c76:	1f 1d       	adc	r17, r15
		DataArray[i] = Soft_Microwire_Read_Byte();
     c78:	60 d1       	rcall	.+704    	; 0xf3a <Soft_Microwire_Read_Byte>
     c7a:	89 93       	st	Y+, r24
{
	uint8_t i;

	PCF85063_CS_PORT |= PCF85063_CS_PIN;
	Soft_Microwire_Write_Byte(READ_NOT_WRITE|Address);	// Address
	for(i=0; i<Length; i++)
     c7c:	c0 17       	cp	r28, r16
     c7e:	d1 07       	cpc	r29, r17
     c80:	d9 f7       	brne	.-10     	; 0xc78 <PCF85063_Read+0x28>
		DataArray[i] = Soft_Microwire_Read_Byte();
	PCF85063_CS_PORT &= ~PCF85063_CS_PIN;
     c82:	da 98       	cbi	0x1b, 2	; 27
	DataArray[0] &= 0x7F;	// clear OS bit
     c84:	f7 01       	movw	r30, r14
     c86:	80 81       	ld	r24, Z
     c88:	8f 77       	andi	r24, 0x7F	; 127
     c8a:	80 83       	st	Z, r24
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	08 95       	ret

00000c9a <main>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	96 e0       	ldi	r25, 0x06	; 6
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	86 bd       	out	0x26, r24	; 38
     ca4:	96 bd       	out	0x26, r25	; 38
     ca6:	0f be       	out	0x3f, r0	; 63
volatile uint8_t Tasks;

int main(void)
{
	clock_prescale_set(clock_div_64);	// SLOW DOWN, 8MHz/64 = 125 kHz
	cli();			// disable all interrupts
     ca8:	f8 94       	cli
	DDRA   = 0x5C;
     caa:	9c e5       	ldi	r25, 0x5C	; 92
     cac:	9a bb       	out	0x1a, r25	; 26
	PORTA  = 0x7A;
     cae:	9a e7       	ldi	r25, 0x7A	; 122
     cb0:	9b bb       	out	0x1b, r25	; 27
	DDRB   = 0x03;
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	97 bb       	out	0x17, r25	; 23
	PORTB  = 0x04;
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	98 bb       	out	0x18, r25	; 24
	MCUCR  = 0x00;	// Low level INT0, Button
     cba:	15 be       	out	0x35, r1	; 53
	DIDR0  = 0x80;	// disable digital input on analog input pin
     cbc:	81 b9       	out	0x01, r24	; 1
	PRR    = 0x0F;	// power down T0, T1, ADC, and USI
     cbe:	8f e0       	ldi	r24, 0x0F	; 15
     cc0:	80 b9       	out	0x00, r24	; 0
	sei();			// re-enable interrupts
     cc2:	78 94       	sei

	PCF85063_Setup();
     cc4:	93 df       	rcall	.-218    	; 0xbec <PCF85063_Setup>
	Power_Down();
     cc6:	86 d0       	rcall	.+268    	; 0xdd4 <Power_Down>

    while(1)
    {
        if(Tasks & DO_COM_RX)				Soft_UART_Rx_Task();
     cc8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     ccc:	81 ff       	sbrs	r24, 1
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <main+0x3a>
     cd0:	1d d2       	rcall	.+1082   	; 0x110c <Soft_UART_Rx_Task>
     cd2:	fa cf       	rjmp	.-12     	; 0xcc8 <main+0x2e>
		else if(Tasks & DO_BUTTON_TASK)		Button_Task();
     cd4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     cd8:	83 ff       	sbrs	r24, 3
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <main+0x46>
     cdc:	4f d0       	rcall	.+158    	; 0xd7c <Button_Task>
     cde:	f4 cf       	rjmp	.-24     	; 0xcc8 <main+0x2e>
        else if(Tasks & DO_RTC_TASK)		RTC_Task();
     ce0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     ce4:	82 ff       	sbrs	r24, 2
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <main+0x52>
     ce8:	b5 d0       	rcall	.+362    	; 0xe54 <RTC_Task>
     cea:	ee cf       	rjmp	.-36     	; 0xcc8 <main+0x2e>
		else if(Tasks & DO_POWERDOWN_TASK)	Power_Down();
     cec:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     cf0:	84 ff       	sbrs	r24, 4
     cf2:	ea cf       	rjmp	.-44     	; 0xcc8 <main+0x2e>
     cf4:	6f d0       	rcall	.+222    	; 0xdd4 <Power_Down>
     cf6:	e8 cf       	rjmp	.-48     	; 0xcc8 <main+0x2e>

00000cf8 <Dose_Record>:
void Timer0_Init(void);

// Either dose taken or time expired
// record and setup to wait for next time period
void Dose_Record(uint8_t Min, uint8_t Hr, uint8_t Day, uint8_t Mon)
{
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	e8 2e       	mov	r14, r24
     d06:	f6 2e       	mov	r15, r22
     d08:	04 2f       	mov	r16, r20
     d0a:	12 2f       	mov	r17, r18
	uint16_t DataDestination;

	DataDestination = GetCurrentDose()*4;
     d0c:	01 df       	rcall	.-510    	; 0xb10 <GetCurrentDose>
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	ec 01       	movw	r28, r24
     d12:	cc 0f       	add	r28, r28
     d14:	dd 1f       	adc	r29, r29
     d16:	cc 0f       	add	r28, r28
     d18:	dd 1f       	adc	r29, r29
	if(DataDestination < EE_DATA_STORAGE_LENGTH)	// store minutes, hours, months, years
     d1a:	cc 38       	cpi	r28, 0x8C	; 140
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	d8 07       	cpc	r29, r24
     d20:	a8 f4       	brcc	.+42     	; 0xd4c <Dose_Record+0x54>
	{
		eeprom_write_byte((uint8_t *)(&EEDataStorage)+DataDestination, Min);
     d22:	6e 2d       	mov	r22, r14
     d24:	ce 01       	movw	r24, r28
     d26:	8c 58       	subi	r24, 0x8C	; 140
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	80 d3       	rcall	.+1792   	; 0x142c <eeprom_write_byte>
		eeprom_write_byte((uint8_t *)(&EEDataStorage)+DataDestination+1, Hr);
     d2c:	6f 2d       	mov	r22, r15
     d2e:	ce 01       	movw	r24, r28
     d30:	8b 58       	subi	r24, 0x8B	; 139
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	7b d3       	rcall	.+1782   	; 0x142c <eeprom_write_byte>
		eeprom_write_byte((uint8_t *)(&EEDataStorage)+DataDestination+2, Day);
     d36:	60 2f       	mov	r22, r16
     d38:	ce 01       	movw	r24, r28
     d3a:	8a 58       	subi	r24, 0x8A	; 138
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	76 d3       	rcall	.+1772   	; 0x142c <eeprom_write_byte>
		eeprom_write_byte((uint8_t *)(&EEDataStorage)+DataDestination+3, Mon);
     d40:	61 2f       	mov	r22, r17
     d42:	ce 01       	movw	r24, r28
     d44:	89 58       	subi	r24, 0x89	; 137
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	71 d3       	rcall	.+1762   	; 0x142c <eeprom_write_byte>
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <Dose_Record+0x6e>
	}
	else
	{
		RAMDataStorage[DataDestination-EE_DATA_STORAGE_LENGTH] = Min;
     d4c:	ce 01       	movw	r24, r28
     d4e:	86 52       	subi	r24, 0x26	; 38
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	fc 01       	movw	r30, r24
     d54:	ec 58       	subi	r30, 0x8C	; 140
     d56:	f1 40       	sbci	r31, 0x01	; 1
     d58:	e0 82       	st	Z, r14
		RAMDataStorage[DataDestination-EE_DATA_STORAGE_LENGTH+1] = Hr;
     d5a:	31 96       	adiw	r30, 0x01	; 1
     d5c:	f0 82       	st	Z, r15
		RAMDataStorage[DataDestination-EE_DATA_STORAGE_LENGTH+2] = Day;
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	00 83       	st	Z, r16
		RAMDataStorage[DataDestination-EE_DATA_STORAGE_LENGTH+3] = Mon;
     d62:	31 96       	adiw	r30, 0x01	; 1
     d64:	10 83       	st	Z, r17
	}
	SetDoseTaken();		// update counter and calculate new time periods
     d66:	74 de       	rcall	.-792    	; 0xa50 <SetDoseTaken>
	IgnoreButton = TRUE;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <IgnoreButton>
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <Button_Task>:

// Button Task
// reset com timer
// Save push time if not too soon
void Button_Task(void)
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	27 97       	sbiw	r28, 0x07	; 7
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
	uint8_t TimeArray[PCF85063_TIME_LENGTH];

	Tasks &= ~DO_BUTTON_TASK;
     d90:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     d94:	87 7f       	andi	r24, 0xF7	; 247
     d96:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
	Tasks |= DO_POWERDOWN_TASK;
     d9a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     d9e:	80 61       	ori	r24, 0x10	; 16
     da0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>

	ComTimer = COM_TIMER_RELOAD_60_SECS;
     da4:	8c e3       	ldi	r24, 0x3C	; 60
     da6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <ComTimer>

	if(!IgnoreButton)
     daa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <IgnoreButton>
     dae:	81 11       	cpse	r24, r1
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <Button_Task+0x46>
	{
		GetCurrentTime(TimeArray);
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	ff de       	rcall	.-514    	; 0xbb6 <GetCurrentTime>
		Dose_Record(TimeArray[1], TimeArray[2], TimeArray[3], TimeArray[5]);
     db8:	2e 81       	ldd	r18, Y+6	; 0x06
     dba:	4c 81       	ldd	r20, Y+4	; 0x04
     dbc:	6b 81       	ldd	r22, Y+3	; 0x03
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b df       	rcall	.-202    	; 0xcf8 <Dose_Record>
	}
}
     dc2:	27 96       	adiw	r28, 0x07	; 7
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <Power_Down>:
// Things that can wake controller up
// Button, Command, RTC
// Deal with Button and RTC here
void Power_Down(void)
{
	Tasks &= ~DO_POWERDOWN_TASK;
     dd4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     dd8:	8f 7e       	andi	r24, 0xEF	; 239
     dda:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>

	// disable UART Rx pin if timer expired
	if(ComTimer)
     dde:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ComTimer>
     de2:	88 23       	and	r24, r24
     de4:	11 f0       	breq	.+4      	; 0xdea <Power_Down+0x16>
		PORTA |= UART_SOFT_RX_PIN;
     de6:	dd 9a       	sbi	0x1b, 5	; 27
     de8:	01 c0       	rjmp	.+2      	; 0xdec <Power_Down+0x18>
	else
		PORTA &= ~UART_SOFT_RX_PIN;
     dea:	dd 98       	cbi	0x1b, 5	; 27

	// wait for button not pushed and RTC timer trigger over
	while(!(PINA & 0x02))
     dec:	c9 9b       	sbis	0x19, 1	; 25
     dee:	fe cf       	rjmp	.-4      	; 0xdec <Power_Down+0x18>
		;
	while(!(PINB & 0x04))
     df0:	b2 9b       	sbis	0x16, 2	; 22
     df2:	fe cf       	rjmp	.-4      	; 0xdf0 <Power_Down+0x1c>
		;

	GIFR = 0x10;	// clear int flag
     df4:	80 e1       	ldi	r24, 0x10	; 16
     df6:	8a bf       	out	0x3a, r24	; 58
	PCMSK0 = 0x22;	// Enable PCINT5 for PA5, UART Rx and PCINT1 for PA1, RTC
     df8:	82 e2       	ldi	r24, 0x22	; 34
     dfa:	82 bb       	out	0x12, r24	; 18
	GIMSK  = 0x50;	// enable PCIE0 interrupts 0-7 and INT0
     dfc:	80 e5       	ldi	r24, 0x50	; 80
     dfe:	8b bf       	out	0x3b, r24	; 59

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e00:	85 b7       	in	r24, 0x35	; 53
     e02:	87 7e       	andi	r24, 0xE7	; 231
     e04:	80 61       	ori	r24, 0x10	; 16
     e06:	85 bf       	out	0x35, r24	; 53
	sleep_mode();
     e08:	85 b7       	in	r24, 0x35	; 53
     e0a:	80 62       	ori	r24, 0x20	; 32
     e0c:	85 bf       	out	0x35, r24	; 53
     e0e:	88 95       	sleep
     e10:	85 b7       	in	r24, 0x35	; 53
     e12:	8f 7d       	andi	r24, 0xDF	; 223
     e14:	85 bf       	out	0x35, r24	; 53
     e16:	08 95       	ret

00000e18 <__vector_1>:

// External Interrupt Request 0, Button
// Disable Interrupt
// Schedule Button Task
ISR(EXT_INT0_vect)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	8f 93       	push	r24
	GIMSK &= ~0x40;				// disable INTs
     e24:	8b b7       	in	r24, 0x3b	; 59
     e26:	8f 7b       	andi	r24, 0xBF	; 191
     e28:	8b bf       	out	0x3b, r24	; 59
	Tasks |= DO_BUTTON_TASK;
     e2a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     e2e:	88 60       	ori	r24, 0x08	; 8
     e30:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
}
     e34:	8f 91       	pop	r24
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <Timer0_Init>:

//TIMER0 initialize - prescale:8
// WGM: Normal, desired value: 20 mSec, actual value: 20.0 mSec
void Timer0_Init(void)
{
	PRR &= ~0x04;
     e40:	02 98       	cbi	0x00, 2	; 0
	TIMSK0 = 0x01;		// enable OVF interrupt
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 bf       	out	0x39, r24	; 57
	TIFR0  = 0x00;
     e46:	18 be       	out	0x38, r1	; 56
	TCCR0A = 0x00;
     e48:	10 be       	out	0x30, r1	; 48
	TCCR0B = 0x03;		// div by 64 pre-scalar
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	83 bf       	out	0x33, r24	; 51
	TCNT0  = 0xd9;		// reload value
     e4e:	89 ed       	ldi	r24, 0xD9	; 217
     e50:	82 bf       	out	0x32, r24	; 50
     e52:	08 95       	ret

00000e54 <RTC_Task>:
//	Set LEDs as appropriate
//	Setup LED timer
//	Read RTC Status and time
//	Enable/Disable Dose Button response
void RTC_Task(void)
{
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	27 97       	sbiw	r28, 0x07	; 7
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
	uint8_t TimeArray[PCF85063_TIME_LENGTH];

	Tasks &= ~DO_RTC_TASK;
     e68:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     e6c:	8b 7f       	andi	r24, 0xFB	; 251
     e6e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
	if(ComTimer)
     e72:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ComTimer>
     e76:	88 23       	and	r24, r24
     e78:	19 f0       	breq	.+6      	; 0xe80 <RTC_Task+0x2c>
		ComTimer--;
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <ComTimer>
	//		else if between dose ready and dose ready + 1/3 dose time period
	//			if 1 dose left
	//				YELLOW
	//			else
	//				GREEN
	if(GetTotalDoses() && TreatmentStarted)
     e80:	43 de       	rcall	.-890    	; 0xb08 <GetTotalDoses>
     e82:	88 23       	and	r24, r24
     e84:	29 f1       	breq	.+74     	; 0xed0 <RTC_Task+0x7c>
     e86:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TreatmentStarted>
     e8a:	88 23       	and	r24, r24
     e8c:	09 f1       	breq	.+66     	; 0xed0 <RTC_Task+0x7c>
	{
		if(!GetDosesRemaining())
     e8e:	44 de       	rcall	.-888    	; 0xb18 <GetDosesRemaining>
     e90:	81 11       	cpse	r24, r1
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <RTC_Task+0x44>
			LED_PORT &= ~LED_RED;
     e94:	de 98       	cbi	0x1b, 6	; 27
     e96:	0a c0       	rjmp	.+20     	; 0xeac <RTC_Task+0x58>
		else if(!IgnoreButton)
     e98:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <IgnoreButton>
     e9c:	81 11       	cpse	r24, r1
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <RTC_Task+0x58>
		{
			if(GetDosesRemaining() == 1)
     ea0:	3b de       	rcall	.-906    	; 0xb18 <GetDosesRemaining>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <RTC_Task+0x56>
				LED_PORT &= ~LED_YELLOW;
     ea6:	dc 98       	cbi	0x1b, 4	; 27
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <RTC_Task+0x58>
			else
				LED_PORT &= ~LED_GREEN;
     eaa:	db 98       	cbi	0x1b, 3	; 27
		}
		Timer0_Init();				// setup time for LED on
     eac:	c9 df       	rcall	.-110    	; 0xe40 <Timer0_Init>

		UpdateCurrentTime();		// read from RTC
     eae:	72 de       	rcall	.-796    	; 0xb94 <UpdateCurrentTime>

		// ignore button if outside of dose compliance times
		// or if dose taken this time period
		if(DoseReady())
     eb0:	f3 dd       	rcall	.-1050   	; 0xa98 <DoseReady>
     eb2:	81 11       	cpse	r24, r1
			IgnoreButton = FALSE;
     eb4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <IgnoreButton>
		if(DoseMissed())
     eb8:	0b de       	rcall	.-1002   	; 0xad0 <DoseMissed>
     eba:	88 23       	and	r24, r24
     ebc:	71 f0       	breq	.+28     	; 0xeda <RTC_Task+0x86>
		{
			GetCurrentTime(TimeArray);
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	79 de       	rcall	.-782    	; 0xbb6 <GetCurrentTime>
			Dose_Record(0,0,0,0);// record as missed dose
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	15 df       	rcall	.-470    	; 0xcf8 <Dose_Record>
     ece:	05 c0       	rjmp	.+10     	; 0xeda <RTC_Task+0x86>
		}
	}
	else
		Tasks |= DO_POWERDOWN_TASK;	// if no doses no need to track, just power down
     ed0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     ed4:	80 61       	ori	r24, 0x10	; 16
     ed6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
}
     eda:	27 96       	adiw	r28, 0x07	; 7
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <__vector_11>:
	TCNT0  = 0xd9;		// reload value
}

//  Timer/Counter0 Overflow
ISR(TIM0_OVF_vect)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	8f 93       	push	r24
	TCCR0B = 0x00;	// timer off
     ef8:	13 be       	out	0x33, r1	; 51
	TIMSK0 = 0x00;	// disable interrupt
     efa:	19 be       	out	0x39, r1	; 57
	PRR |= 0x04;	// power down timer
     efc:	02 9a       	sbi	0x00, 2	; 0
	LED_PORT |= LED_RED | LED_YELLOW | LED_GREEN;	// All LEDs off
     efe:	8b b3       	in	r24, 0x1b	; 27
     f00:	88 65       	ori	r24, 0x58	; 88
     f02:	8b bb       	out	0x1b, r24	; 27
	Tasks |= DO_POWERDOWN_TASK;
     f04:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
}
     f0e:	8f 91       	pop	r24
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <Soft_Microwire_Write_Byte>:
void Soft_Microwire_Write_Byte(const uint8_t WriteByte)
{
	uint8_t i;
	uint8_t MaskBit = 0x80;

	SOFT_MIROWIRE_DATA_DDR |= SOFT_MIROWIRE_DATA_PIN;	// set to output
     f1a:	b8 9a       	sbi	0x17, 0	; 23
     f1c:	98 e0       	ldi	r25, 0x08	; 8
#include "SoftMicrowire.h"

void Soft_Microwire_Write_Byte(const uint8_t WriteByte)
{
	uint8_t i;
	uint8_t MaskBit = 0x80;
     f1e:	20 e8       	ldi	r18, 0x80	; 128
	SOFT_MIROWIRE_DATA_DDR |= SOFT_MIROWIRE_DATA_PIN;	// set to output

	/* transmit MSb first, sample at clock rising edge */
	for(i=0; i<8; i++)
	{	
		SOFT_MIROWIRE_CLK_PORT &= ~SOFT_MIROWIRE_CLK_PIN;
     f20:	c1 98       	cbi	0x18, 1	; 24
		if(WriteByte & MaskBit)
     f22:	38 2f       	mov	r19, r24
     f24:	32 23       	and	r19, r18
     f26:	11 f0       	breq	.+4      	; 0xf2c <Soft_Microwire_Write_Byte+0x12>
			SOFT_MIROWIRE_DATA_WRITE_PORT |= SOFT_MIROWIRE_DATA_PIN;
     f28:	c0 9a       	sbi	0x18, 0	; 24
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <Soft_Microwire_Write_Byte+0x14>
		else
			SOFT_MIROWIRE_DATA_WRITE_PORT &= ~SOFT_MIROWIRE_DATA_PIN;
     f2c:	c0 98       	cbi	0x18, 0	; 24
		SOFT_MIROWIRE_CLK_PORT |= SOFT_MIROWIRE_CLK_PIN;
     f2e:	c1 9a       	sbi	0x18, 1	; 24
		MaskBit >>= 1;
     f30:	26 95       	lsr	r18
     f32:	91 50       	subi	r25, 0x01	; 1
	uint8_t MaskBit = 0x80;

	SOFT_MIROWIRE_DATA_DDR |= SOFT_MIROWIRE_DATA_PIN;	// set to output

	/* transmit MSb first, sample at clock rising edge */
	for(i=0; i<8; i++)
     f34:	a9 f7       	brne	.-22     	; 0xf20 <Soft_Microwire_Write_Byte+0x6>
		else
			SOFT_MIROWIRE_DATA_WRITE_PORT &= ~SOFT_MIROWIRE_DATA_PIN;
		SOFT_MIROWIRE_CLK_PORT |= SOFT_MIROWIRE_CLK_PIN;
		MaskBit >>= 1;
	}
	SOFT_MIROWIRE_CLK_PORT &= ~SOFT_MIROWIRE_CLK_PIN;
     f36:	c1 98       	cbi	0x18, 1	; 24
     f38:	08 95       	ret

00000f3a <Soft_Microwire_Read_Byte>:
{
	uint8_t i;
	uint8_t ReturnByte = 0;
	uint8_t MaskBit = 0x80;

	SOFT_MIROWIRE_DATA_DDR &= ~SOFT_MIROWIRE_DATA_PIN;	// set to input
     f3a:	b8 98       	cbi	0x17, 0	; 23
     f3c:	98 e0       	ldi	r25, 0x08	; 8

uint8_t Soft_Microwire_Read_Byte(void)
{
	uint8_t i;
	uint8_t ReturnByte = 0;
	uint8_t MaskBit = 0x80;
     f3e:	20 e8       	ldi	r18, 0x80	; 128
}

uint8_t Soft_Microwire_Read_Byte(void)
{
	uint8_t i;
	uint8_t ReturnByte = 0;
     f40:	80 e0       	ldi	r24, 0x00	; 0
	SOFT_MIROWIRE_DATA_DDR &= ~SOFT_MIROWIRE_DATA_PIN;	// set to input

	/* receive MSb first, sample at clock rising edge */
	for(i=0; i<8; i++)
	{
		SOFT_MIROWIRE_CLK_PORT &= ~SOFT_MIROWIRE_CLK_PIN;
     f42:	c1 98       	cbi	0x18, 1	; 24
		SOFT_MIROWIRE_CLK_PORT |= SOFT_MIROWIRE_CLK_PIN;
     f44:	c1 9a       	sbi	0x18, 1	; 24

		if(SOFT_MIROWIRE_DATA_READ_PORT & SOFT_MIROWIRE_DATA_PIN)
     f46:	b0 99       	sbic	0x16, 0	; 22
			ReturnByte |= MaskBit;
     f48:	82 2b       	or	r24, r18
		MaskBit >>= 1;
     f4a:	26 95       	lsr	r18
     f4c:	91 50       	subi	r25, 0x01	; 1
	uint8_t MaskBit = 0x80;

	SOFT_MIROWIRE_DATA_DDR &= ~SOFT_MIROWIRE_DATA_PIN;	// set to input

	/* receive MSb first, sample at clock rising edge */
	for(i=0; i<8; i++)
     f4e:	c9 f7       	brne	.-14     	; 0xf42 <Soft_Microwire_Read_Byte+0x8>
		if(SOFT_MIROWIRE_DATA_READ_PORT & SOFT_MIROWIRE_DATA_PIN)
			ReturnByte |= MaskBit;
		MaskBit >>= 1;
	}

	SOFT_MIROWIRE_CLK_PORT &= ~SOFT_MIROWIRE_CLK_PIN;
     f50:	c1 98       	cbi	0x18, 1	; 24
	return ReturnByte;
}
     f52:	08 95       	ret

00000f54 <__vector_2>:
/*************************************************************//**
\brief Get and store received character, schedule parse task
\return	none
***************************************************************/
ISR(PCINT0_vect)
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
	static uint8_t Data = 0;
	static uint8_t TempU8;
	static uint8_t i;

	// if not Rx pin and pull up activated then Rx UART byte
	if(!(PINA & UART_SOFT_RX_PIN) && (PORTA & UART_SOFT_RX_PIN))
     f68:	cd 99       	sbic	0x19, 5	; 25
     f6a:	73 c0       	rjmp	.+230    	; 0x1052 <__vector_2+0xfe>
     f6c:	dd 9b       	sbis	0x1b, 5	; 27
     f6e:	71 c0       	rjmp	.+226    	; 0x1052 <__vector_2+0xfe>
     f70:	84 e4       	ldi	r24, 0x44	; 68
	{
		for(i=0; i<68; i++)			// 2400:11, 1200:29, 600:68 @125K
			NOP();
     f72:	00 00       	nop
     f74:	81 50       	subi	r24, 0x01	; 1
	static uint8_t i;

	// if not Rx pin and pull up activated then Rx UART byte
	if(!(PINA & UART_SOFT_RX_PIN) && (PORTA & UART_SOFT_RX_PIN))
	{
		for(i=0; i<68; i++)			// 2400:11, 1200:29, 600:68 @125K
     f76:	e9 f7       	brne	.-6      	; 0xf72 <__vector_2+0x1e>
     f78:	84 e4       	ldi	r24, 0x44	; 68
     f7a:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <i.2056>
			NOP();

//		i |= 0x02; // time place holder
		if(UART_SOFT_RX_PORT & UART_SOFT_RX_PIN)
     f7e:	cd 9b       	sbis	0x19, 5	; 25
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <__vector_2+0x3a>
			Data |= 0x80;
     f82:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <__vector_2+0x4a>
		else
		{
			Data &= 0x7F;
     f8e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     f92:	8f 77       	andi	r24, 0x7F	; 127
     f94:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
			NOP();NOP();NOP();
     f98:	00 00       	nop
     f9a:	00 00       	nop
     f9c:	00 00       	nop
		}
		Data >>= 1;
     f9e:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     fa2:	86 95       	lsr	r24
     fa4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
     fa8:	8d e2       	ldi	r24, 0x2D	; 45

		i &= ~0x02;
		for(i=0; i<45; i++)			// 2400:9, 1200:19, 600:45 @125K
			NOP();
     faa:	00 00       	nop
     fac:	81 50       	subi	r24, 0x01	; 1
			NOP();NOP();NOP();
		}
		Data >>= 1;

		i &= ~0x02;
		for(i=0; i<45; i++)			// 2400:9, 1200:19, 600:45 @125K
     fae:	e9 f7       	brne	.-6      	; 0xfaa <__vector_2+0x56>
     fb0:	8d e2       	ldi	r24, 0x2D	; 45
     fb2:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <i.2056>
			NOP();
		// read the received bit and shift
		for(TempU8=1; TempU8<7; TempU8++)
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <TempU8.2055>
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	2d e2       	ldi	r18, 0x2D	; 45
		{
			i |= 0x02;	// time place holder
     fc0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <i.2056>
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <i.2056>
			if(UART_SOFT_RX_PORT & UART_SOFT_RX_PIN)
     fca:	cd 9b       	sbis	0x19, 5	; 25
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <__vector_2+0x86>
				Data |= 0x80;
     fce:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     fd2:	80 68       	ori	r24, 0x80	; 128
     fd4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <__vector_2+0x94>
			else
			{
				Data &= 0x7F;
     fda:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     fde:	8f 77       	andi	r24, 0x7F	; 127
     fe0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
				NOP();NOP();
     fe4:	00 00       	nop
     fe6:	00 00       	nop

		i &= ~0x02;
		for(i=0; i<45; i++)			// 2400:9, 1200:19, 600:45 @125K
			NOP();
		// read the received bit and shift
		for(TempU8=1; TempU8<7; TempU8++)
     fe8:	8d e2       	ldi	r24, 0x2D	; 45
			{
				Data &= 0x7F;
				NOP();NOP();
			}
			for(i=0; i<45; i++)		// 2400:?, 1200:19, 600:45 @125K
				NOP();
     fea:	00 00       	nop
     fec:	81 50       	subi	r24, 0x01	; 1
			else
			{
				Data &= 0x7F;
				NOP();NOP();
			}
			for(i=0; i<45; i++)		// 2400:?, 1200:19, 600:45 @125K
     fee:	e9 f7       	brne	.-6      	; 0xfea <__vector_2+0x96>
     ff0:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <i.2056>
				NOP();

			i &= ~0x02;
			Data >>= 1;
     ff4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
     ff8:	86 95       	lsr	r24
     ffa:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>

		i &= ~0x02;
		for(i=0; i<45; i++)			// 2400:9, 1200:19, 600:45 @125K
			NOP();
		// read the received bit and shift
		for(TempU8=1; TempU8<7; TempU8++)
     ffe:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <TempU8.2055>
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	98 30       	cpi	r25, 0x08	; 8
    1006:	e1 f6       	brne	.-72     	; 0xfc0 <__vector_2+0x6c>
				NOP();

			i &= ~0x02;
			Data >>= 1;
		}
		NOP();NOP();
    1008:	00 00       	nop
    100a:	00 00       	nop
		// get last bit, no shift
		i &= ~0x02;	// time place holder
    100c:	9d e2       	ldi	r25, 0x2D	; 45
    100e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <i.2056>
		if(UART_SOFT_RX_PORT & UART_SOFT_RX_PIN)
    1012:	cd 9b       	sbis	0x19, 5	; 25
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__vector_2+0xca>
			Data |= 0x80;
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <__vector_2+0xce>
		else
			Data &= 0x7F;
    101e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Data.2054>

		if(ComTimer) // only accept characters if Com enabled, 1 min after button push or full command Rxd
    1022:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <ComTimer>
    1026:	88 23       	and	r24, r24
    1028:	d9 f0       	breq	.+54     	; 0x1060 <__vector_2+0x10c>
		{
			// calculate buffer index
			TempU8 = (Rx0Head + 1) & RX0_BUFFER_MASK;
    102a:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <Rx0Head>
    102e:	ef 5f       	subi	r30, 0xFF	; 255
    1030:	ef 71       	andi	r30, 0x1F	; 31
    1032:	e0 93 99 00 	sts	0x0099, r30	; 0x800099 <TempU8.2055>
			Rx0Head = TempU8; 						// store new index
    1036:	e0 93 9d 00 	sts	0x009D, r30	; 0x80009d <Rx0Head>
			Rx0Buf[TempU8] = Data; 					// store received data in buffer
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	e2 56       	subi	r30, 0x62	; 98
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Data.2054>
    1044:	80 83       	st	Z, r24
			Tasks |= DO_COM_RX;						// schedule parse task
    1046:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <__vector_2+0x10c>
		}
	}
	else if(!(PINA & 0x02))
    1052:	c9 99       	sbic	0x19, 1	; 25
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <__vector_2+0x10c>
		Tasks |= DO_RTC_TASK;
    1056:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
    105a:	84 60       	ori	r24, 0x04	; 4
    105c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>

	GIFR = 0x10;							// clear int flag
    1060:	80 e1       	ldi	r24, 0x10	; 16
    1062:	8a bf       	out	0x3a, r24	; 58
}
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	0f 90       	pop	r0
    1074:	1f 90       	pop	r1
    1076:	18 95       	reti

00001078 <Soft_UART_Tx_Byte>:
{
	static uint8_t i,j;

	// start transmission
	// send start bit
	LED_PORT |= LED_YELLOW | LED_GREEN;	// LEDs off
    1078:	9b b3       	in	r25, 0x1b	; 27
    107a:	98 61       	ori	r25, 0x18	; 24
    107c:	9b bb       	out	0x1b, r25	; 27
	UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
    107e:	de 98       	cbi	0x1b, 6	; 27
    1080:	93 e3       	ldi	r25, 0x33	; 51
	for(i=0; i<51; i++)			// 2400:12, 1200:25, 600:51 @125K
		NOP();
    1082:	00 00       	nop
    1084:	91 50       	subi	r25, 0x01	; 1

	// start transmission
	// send start bit
	LED_PORT |= LED_YELLOW | LED_GREEN;	// LEDs off
	UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
	for(i=0; i<51; i++)			// 2400:12, 1200:25, 600:51 @125K
    1086:	e9 f7       	brne	.-6      	; 0x1082 <Soft_UART_Tx_Byte+0xa>
		NOP();

	for(i=0; i<8; i++)
    1088:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <i.2079>
    108c:	20 e3       	ldi	r18, 0x30	; 48
	{
		if(DataByte & 0x01)
    108e:	80 ff       	sbrs	r24, 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <Soft_UART_Tx_Byte+0x1e>
			UART_SOFT_TX_PORT |= UART_SOFT_TX_PIN;
    1092:	de 9a       	sbi	0x1b, 6	; 27
    1094:	04 c0       	rjmp	.+8      	; 0x109e <Soft_UART_Tx_Byte+0x26>
		else
		{
			UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
    1096:	de 98       	cbi	0x1b, 6	; 27
			NOP();NOP();NOP();
    1098:	00 00       	nop
    109a:	00 00       	nop
    109c:	00 00       	nop
	static uint8_t i,j;

	// start transmission
	// send start bit
	LED_PORT |= LED_YELLOW | LED_GREEN;	// LEDs off
	UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
    109e:	90 e3       	ldi	r25, 0x30	; 48
		{
			UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
			NOP();NOP();NOP();
		}
		for(j=0; j<48; j++)		// 2400:9, 1200:21, 600:48 @125K
			NOP();
    10a0:	00 00       	nop
    10a2:	91 50       	subi	r25, 0x01	; 1
		else
		{
			UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
			NOP();NOP();NOP();
		}
		for(j=0; j<48; j++)		// 2400:9, 1200:21, 600:48 @125K
    10a4:	e9 f7       	brne	.-6      	; 0x10a0 <Soft_UART_Tx_Byte+0x28>
    10a6:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <j.2080>
			NOP();

		DataByte >>= 1;
    10aa:	86 95       	lsr	r24
	LED_PORT |= LED_YELLOW | LED_GREEN;	// LEDs off
	UART_SOFT_TX_PORT &= ~UART_SOFT_TX_PIN;
	for(i=0; i<51; i++)			// 2400:12, 1200:25, 600:51 @125K
		NOP();

	for(i=0; i<8; i++)
    10ac:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <i.2079>
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <i.2079>
    10b6:	98 30       	cpi	r25, 0x08	; 8
    10b8:	50 f3       	brcs	.-44     	; 0x108e <Soft_UART_Tx_Byte+0x16>
		for(j=0; j<48; j++)		// 2400:9, 1200:21, 600:48 @125K
			NOP();

		DataByte >>= 1;
	}
	UART_SOFT_TX_PORT |= UART_SOFT_TX_PIN;
    10ba:	de 9a       	sbi	0x1b, 6	; 27
    10bc:	80 e3       	ldi	r24, 0x30	; 48
	for(j=0; j<48; j++)			// 2400:9, 1200:21, 600:48 @125K
		NOP();
    10be:	00 00       	nop
    10c0:	81 50       	subi	r24, 0x01	; 1
			NOP();

		DataByte >>= 1;
	}
	UART_SOFT_TX_PORT |= UART_SOFT_TX_PIN;
	for(j=0; j<48; j++)			// 2400:9, 1200:21, 600:48 @125K
    10c2:	e9 f7       	brne	.-6      	; 0x10be <Soft_UART_Tx_Byte+0x46>
    10c4:	80 e3       	ldi	r24, 0x30	; 48
    10c6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <j.2080>
    10ca:	08 95       	ret

000010cc <Soft_UART_Tx_Message>:

\param string Message Pointer to message String to be transmitted
\return	none
***************************************************************/
void Soft_UART_Tx_Message(const char *string)
{
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
	while(*string)
    10d2:	88 81       	ld	r24, Y
    10d4:	88 23       	and	r24, r24
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <Soft_UART_Tx_Message+0x16>
    10d8:	21 96       	adiw	r28, 0x01	; 1
		Soft_UART_Tx_Byte(*string++);
    10da:	ce df       	rcall	.-100    	; 0x1078 <Soft_UART_Tx_Byte>
\param string Message Pointer to message String to be transmitted
\return	none
***************************************************************/
void Soft_UART_Tx_Message(const char *string)
{
	while(*string)
    10dc:	89 91       	ld	r24, Y+
    10de:	81 11       	cpse	r24, r1
    10e0:	fc cf       	rjmp	.-8      	; 0x10da <Soft_UART_Tx_Message+0xe>
		Soft_UART_Tx_Byte(*string++);
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <Soft_UART_Tx_Const_Message>:

\param string Message Pointer to message String in flash to be transmitted
\return	none
***************************************************************/
void Soft_UART_Tx_Const_Message(const char *string)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
	while(pgm_read_byte(&(*string)))
    10ee:	fc 01       	movw	r30, r24
    10f0:	84 91       	lpm	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	41 f0       	breq	.+16     	; 0x1106 <Soft_UART_Tx_Const_Message+0x1e>
    10f6:	fe 01       	movw	r30, r28
		Soft_UART_Tx_Byte(pgm_read_byte(&(*string++)));
    10f8:	21 96       	adiw	r28, 0x01	; 1
    10fa:	84 91       	lpm	r24, Z
    10fc:	bd df       	rcall	.-134    	; 0x1078 <Soft_UART_Tx_Byte>
\param string Message Pointer to message String in flash to be transmitted
\return	none
***************************************************************/
void Soft_UART_Tx_Const_Message(const char *string)
{
	while(pgm_read_byte(&(*string)))
    10fe:	fe 01       	movw	r30, r28
    1100:	84 91       	lpm	r24, Z
    1102:	81 11       	cpse	r24, r1
    1104:	f8 cf       	rjmp	.-16     	; 0x10f6 <Soft_UART_Tx_Const_Message+0xe>
		Soft_UART_Tx_Byte(pgm_read_byte(&(*string++)));
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <Soft_UART_Rx_Task>:
/*************************************************************//**
\brief Check Rx buffer for incoming messages on ports, parses and responds
\return none
***************************************************************/
void Soft_UART_Rx_Task(void)
{
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
	static char *ComRxdStringPtr;
	static uint16_t *CharCountPtr;
	static uint16_t CharCount0 = 0;
	static char Com0RxdString[RX0_PARSE_BUFFER_SIZE];

	Tasks &= ~DO_COM_RX;
    111a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Tasks>
    111e:	8d 7f       	andi	r24, 0xFD	; 253
    1120:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Tasks>

	RxHeadptr = &Rx0Head;
	RxTailptr = &Rx0Tail;
	ComRxdStringPtr = &Com0RxdString[0];
    1124:	85 e7       	ldi	r24, 0x75	; 117
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <ComRxdStringPtr.2120+0x1>
    112c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ComRxdStringPtr.2120>
	CharCountPtr = &CharCount0;
    1130:	81 e7       	ldi	r24, 0x71	; 113
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <CharCountPtr.2121+0x1>
    1138:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <CharCountPtr.2121>
	RxBufferSize = RX0_PARSE_BUFFER_SIZE;

	fptrComRxByte0 = Com0_Rx_Byte;

	while(*RxHeadptr != *RxTailptr)							// check to see if any bytes are in the Rx buffer
    113c:	66 c0       	rjmp	.+204    	; 0x120a <Soft_UART_Rx_Task+0xfe>
***************************************************************/
static int8_t Com0_Rx_Byte(void)
{
	uint8_t tmptail;

	while (Rx0Head == Rx0Tail)
    113e:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Rx0Head>
    1142:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Rx0Tail>
    1146:	98 17       	cp	r25, r24
    1148:	d1 f3       	breq	.-12     	; 0x113e <Soft_UART_Rx_Task+0x32>
		;
	tmptail = (Rx0Tail + 1) & RX0_BUFFER_MASK;		// calculate buffer index
    114a:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Rx0Tail>
    114e:	ef 5f       	subi	r30, 0xFF	; 255
    1150:	ef 71       	andi	r30, 0x1F	; 31
	Rx0Tail = tmptail; 								// store new index
    1152:	e0 93 9c 00 	sts	0x009C, r30	; 0x80009c <Rx0Tail>

	while(*RxHeadptr != *RxTailptr)							// check to see if any bytes are in the Rx buffer
	{
		RxdByte = fptrComRxByte0();

		if(*CharCountPtr >= RxBufferSize)					// if over range
    1156:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <CharCountPtr.2121>
    115a:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <CharCountPtr.2121+0x1>
    115e:	e8 80       	ld	r14, Y
    1160:	f9 80       	ldd	r15, Y+1	; 0x01
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	e8 16       	cp	r14, r24
    1166:	f1 04       	cpc	r15, r1
    1168:	48 f0       	brcs	.+18     	; 0x117c <Soft_UART_Rx_Task+0x70>
		{
			(*CharCountPtr) = 0;
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	18 82       	st	Y, r1
			(*ComRxdStringPtr) = 0;							// reset string
    116e:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <ComRxdStringPtr.2120>
    1172:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <ComRxdStringPtr.2120+0x1>
    1176:	10 82       	st	Z, r1
			Com_Parse_Error();								// send error message
    1178:	c7 d7       	rcall	.+3982   	; 0x2108 <__TEXT_REGION_LENGTH__+0x108>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <Soft_UART_Rx_Task+0xfe>

	while (Rx0Head == Rx0Tail)
		;
	tmptail = (Rx0Tail + 1) & RX0_BUFFER_MASK;		// calculate buffer index
	Rx0Tail = tmptail; 								// store new index
	return Rx0Buf[tmptail]; 						// return data
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	e2 56       	subi	r30, 0x62	; 98
    1180:	ff 4f       	sbci	r31, 0xFF	; 255

	fptrComRxByte0 = Com0_Rx_Byte;

	while(*RxHeadptr != *RxTailptr)							// check to see if any bytes are in the Rx buffer
	{
		RxdByte = fptrComRxByte0();
    1182:	10 81       	ld	r17, Z
		{
			(*CharCountPtr) = 0;
			(*ComRxdStringPtr) = 0;							// reset string
			Com_Parse_Error();								// send error message
		}
		else if(RxdByte == ESCAPE)							// if <ESC>
    1184:	1b 31       	cpi	r17, 0x1B	; 27
    1186:	49 f4       	brne	.+18     	; 0x119a <Soft_UART_Rx_Task+0x8e>
		{
			(*CharCountPtr) = 0;
    1188:	19 82       	std	Y+1, r1	; 0x01
    118a:	18 82       	st	Y, r1
			(*ComRxdStringPtr) = 0;							// reset string
    118c:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <ComRxdStringPtr.2120>
    1190:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <ComRxdStringPtr.2120+0x1>
    1194:	10 82       	st	Z, r1
			Com_Parse_Error();								// send error message
    1196:	b8 d7       	rcall	.+3952   	; 0x2108 <__TEXT_REGION_LENGTH__+0x108>
    1198:	38 c0       	rjmp	.+112    	; 0x120a <Soft_UART_Rx_Task+0xfe>
		}
		else if(RxdByte == BACKSPACE)						// if backspace
    119a:	18 30       	cpi	r17, 0x08	; 8
    119c:	31 f4       	brne	.+12     	; 0x11aa <Soft_UART_Rx_Task+0x9e>
		{
			(*CharCountPtr)--;								// go back one character
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	e8 1a       	sub	r14, r24
    11a2:	f1 08       	sbc	r15, r1
    11a4:	f9 82       	std	Y+1, r15	; 0x01
    11a6:	e8 82       	st	Y, r14
    11a8:	30 c0       	rjmp	.+96     	; 0x120a <Soft_UART_Rx_Task+0xfe>
		}
		else if(isalnum(RxdByte) || ispunct(RxdByte) || (' ' == RxdByte))// check for chars, numbers or punctuation
    11aa:	c1 2e       	mov	r12, r17
    11ac:	d1 2c       	mov	r13, r1
    11ae:	c6 01       	movw	r24, r12
    11b0:	92 d0       	rcall	.+292    	; 0x12d6 <isalnum>
    11b2:	89 2b       	or	r24, r25
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <Soft_UART_Rx_Task+0xb6>
    11b6:	c6 01       	movw	r24, r12
    11b8:	a2 d0       	rcall	.+324    	; 0x12fe <ispunct>
    11ba:	89 2b       	or	r24, r25
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <Soft_UART_Rx_Task+0xb6>
    11be:	10 32       	cpi	r17, 0x20	; 32
    11c0:	71 f4       	brne	.+28     	; 0x11de <Soft_UART_Rx_Task+0xd2>
		{
			*(ComRxdStringPtr+*CharCountPtr) = RxdByte;
    11c2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ComRxdStringPtr.2120>
    11c6:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <ComRxdStringPtr.2120+0x1>
    11ca:	fc 01       	movw	r30, r24
    11cc:	ee 0d       	add	r30, r14
    11ce:	ff 1d       	adc	r31, r15
    11d0:	10 83       	st	Z, r17
			(*CharCountPtr)++;
    11d2:	88 81       	ld	r24, Y
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <Soft_UART_Rx_Task+0xfe>
		}
		else if(RxdByte == '\r')							// if CR, command completed
    11de:	1d 30       	cpi	r17, 0x0D	; 13
    11e0:	a1 f4       	brne	.+40     	; 0x120a <Soft_UART_Rx_Task+0xfe>
		{
			*(ComRxdStringPtr+*CharCountPtr) = 0x00;		// NULL terminate string (replace '\r' with 0x00)
    11e2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ComRxdStringPtr.2120>
    11e6:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <ComRxdStringPtr.2120+0x1>
    11ea:	fc 01       	movw	r30, r24
    11ec:	ee 0d       	add	r30, r14
    11ee:	ff 1d       	adc	r31, r15
    11f0:	10 82       	st	Z, r1
			Com_Parse_String(ComRxdStringPtr);				// else parse
    11f2:	d2 d8       	rcall	.-3676   	; 0x398 <Com_Parse_String>
			(*ComRxdStringPtr) = 0;							// reset string
    11f4:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <ComRxdStringPtr.2120>
    11f8:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <ComRxdStringPtr.2120+0x1>
    11fc:	10 82       	st	Z, r1
			(*CharCountPtr) = 0;							// reset string pointer
    11fe:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <CharCountPtr.2121>
    1202:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <CharCountPtr.2121+0x1>
    1206:	11 82       	std	Z+1, r1	; 0x01
    1208:	10 82       	st	Z, r1
	CharCountPtr = &CharCount0;
	RxBufferSize = RX0_PARSE_BUFFER_SIZE;

	fptrComRxByte0 = Com0_Rx_Byte;

	while(*RxHeadptr != *RxTailptr)							// check to see if any bytes are in the Rx buffer
    120a:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <Rx0Head>
    120e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <Rx0Tail>
    1212:	98 13       	cpse	r25, r24
    1214:	94 cf       	rjmp	.-216    	; 0x113e <Soft_UART_Rx_Task+0x32>
			(*ComRxdStringPtr) = 0;							// reset string
			(*CharCountPtr) = 0;							// reset string pointer
		}
//		else ignore character
	}//while
}
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	08 95       	ret

00001226 <__mulsi3>:
    1226:	ee 27       	eor	r30, r30
    1228:	ff 27       	eor	r31, r31

0000122a <__mulsi3_helper>:
    122a:	aa 27       	eor	r26, r26
    122c:	bb 27       	eor	r27, r27
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <__mulsi3_helper+0x16>
    1230:	a2 0f       	add	r26, r18
    1232:	b3 1f       	adc	r27, r19
    1234:	e4 1f       	adc	r30, r20
    1236:	f5 1f       	adc	r31, r21
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	44 1f       	adc	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	98 f3       	brcs	.-26     	; 0x1230 <__mulsi3_helper+0x6>
    124a:	70 40       	sbci	r23, 0x00	; 0
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__mulsi3_helper+0xe>
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	99 f7       	brne	.-26     	; 0x1238 <__mulsi3_helper+0xe>
    1252:	bd 01       	movw	r22, r26
    1254:	cf 01       	movw	r24, r30
    1256:	08 95       	ret

00001258 <__udivmodsi4>:
    1258:	a1 e2       	ldi	r26, 0x21	; 33
    125a:	1a 2e       	mov	r1, r26
    125c:	aa 1b       	sub	r26, r26
    125e:	bb 1b       	sub	r27, r27
    1260:	fd 01       	movw	r30, r26
    1262:	0d c0       	rjmp	.+26     	; 0x127e <__udivmodsi4_ep>

00001264 <__udivmodsi4_loop>:
    1264:	aa 1f       	adc	r26, r26
    1266:	bb 1f       	adc	r27, r27
    1268:	ee 1f       	adc	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	a2 17       	cp	r26, r18
    126e:	b3 07       	cpc	r27, r19
    1270:	e4 07       	cpc	r30, r20
    1272:	f5 07       	cpc	r31, r21
    1274:	20 f0       	brcs	.+8      	; 0x127e <__udivmodsi4_ep>
    1276:	a2 1b       	sub	r26, r18
    1278:	b3 0b       	sbc	r27, r19
    127a:	e4 0b       	sbc	r30, r20
    127c:	f5 0b       	sbc	r31, r21

0000127e <__udivmodsi4_ep>:
    127e:	66 1f       	adc	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	88 1f       	adc	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	1a 94       	dec	r1
    1288:	69 f7       	brne	.-38     	; 0x1264 <__udivmodsi4_loop>
    128a:	60 95       	com	r22
    128c:	70 95       	com	r23
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	bd 01       	movw	r22, r26
    1298:	cf 01       	movw	r24, r30
    129a:	08 95       	ret

0000129c <atoi>:
    129c:	fc 01       	movw	r30, r24
    129e:	88 27       	eor	r24, r24
    12a0:	99 27       	eor	r25, r25
    12a2:	e8 94       	clt
    12a4:	21 91       	ld	r18, Z+
    12a6:	20 32       	cpi	r18, 0x20	; 32
    12a8:	e9 f3       	breq	.-6      	; 0x12a4 <atoi+0x8>
    12aa:	29 30       	cpi	r18, 0x09	; 9
    12ac:	10 f0       	brcs	.+4      	; 0x12b2 <atoi+0x16>
    12ae:	2e 30       	cpi	r18, 0x0E	; 14
    12b0:	c8 f3       	brcs	.-14     	; 0x12a4 <atoi+0x8>
    12b2:	2b 32       	cpi	r18, 0x2B	; 43
    12b4:	39 f0       	breq	.+14     	; 0x12c4 <atoi+0x28>
    12b6:	2d 32       	cpi	r18, 0x2D	; 45
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <atoi+0x2a>
    12ba:	68 94       	set
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <atoi+0x28>
    12be:	3c d0       	rcall	.+120    	; 0x1338 <__mulhi_const_10>
    12c0:	82 0f       	add	r24, r18
    12c2:	91 1d       	adc	r25, r1
    12c4:	21 91       	ld	r18, Z+
    12c6:	20 53       	subi	r18, 0x30	; 48
    12c8:	2a 30       	cpi	r18, 0x0A	; 10
    12ca:	c8 f3       	brcs	.-14     	; 0x12be <atoi+0x22>
    12cc:	1e f4       	brtc	.+6      	; 0x12d4 <atoi+0x38>
    12ce:	90 95       	com	r25
    12d0:	81 95       	neg	r24
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	08 95       	ret

000012d6 <isalnum>:
    12d6:	91 11       	cpse	r25, r1
    12d8:	06 c0       	rjmp	.+12     	; 0x12e6 <__ctype_isfalse>
    12da:	80 53       	subi	r24, 0x30	; 48
    12dc:	8a 50       	subi	r24, 0x0A	; 10
    12de:	10 f0       	brcs	.+4      	; 0x12e4 <isalnum+0xe>
    12e0:	86 5c       	subi	r24, 0xC6	; 198
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <isalpha>
    12e4:	08 95       	ret

000012e6 <__ctype_isfalse>:
    12e6:	99 27       	eor	r25, r25
    12e8:	88 27       	eor	r24, r24

000012ea <__ctype_istrue>:
    12ea:	08 95       	ret

000012ec <isupper>:
    12ec:	85 fd       	sbrc	r24, 5
    12ee:	fb cf       	rjmp	.-10     	; 0x12e6 <__ctype_isfalse>

000012f0 <isalpha>:
    12f0:	80 62       	ori	r24, 0x20	; 32

000012f2 <islower>:
    12f2:	91 11       	cpse	r25, r1
    12f4:	f8 cf       	rjmp	.-16     	; 0x12e6 <__ctype_isfalse>
    12f6:	81 56       	subi	r24, 0x61	; 97
    12f8:	8a 51       	subi	r24, 0x1A	; 26
    12fa:	e0 f7       	brcc	.-8      	; 0x12f4 <islower+0x2>
    12fc:	08 95       	ret

000012fe <ispunct>:
    12fe:	91 11       	cpse	r25, r1
    1300:	f2 cf       	rjmp	.-28     	; 0x12e6 <__ctype_isfalse>
    1302:	81 52       	subi	r24, 0x21	; 33
    1304:	8e 55       	subi	r24, 0x5E	; 94
    1306:	e0 f7       	brcc	.-8      	; 0x1300 <ispunct+0x2>
    1308:	81 58       	subi	r24, 0x81	; 129
    130a:	e5 df       	rcall	.-54     	; 0x12d6 <isalnum>
    130c:	88 23       	and	r24, r24
    130e:	c1 f7       	brne	.-16     	; 0x1300 <ispunct+0x2>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	08 95       	ret

00001314 <toupper>:
    1314:	91 11       	cpse	r25, r1
    1316:	08 95       	ret
    1318:	81 56       	subi	r24, 0x61	; 97
    131a:	8a 51       	subi	r24, 0x1A	; 26
    131c:	08 f4       	brcc	.+2      	; 0x1320 <toupper+0xc>
    131e:	80 52       	subi	r24, 0x20	; 32
    1320:	85 58       	subi	r24, 0x85	; 133
    1322:	08 95       	ret

00001324 <__itoa_ncheck>:
    1324:	bb 27       	eor	r27, r27
    1326:	4a 30       	cpi	r20, 0x0A	; 10
    1328:	31 f4       	brne	.+12     	; 0x1336 <__itoa_ncheck+0x12>
    132a:	99 23       	and	r25, r25
    132c:	22 f4       	brpl	.+8      	; 0x1336 <__itoa_ncheck+0x12>
    132e:	bd e2       	ldi	r27, 0x2D	; 45
    1330:	90 95       	com	r25
    1332:	81 95       	neg	r24
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	2c c0       	rjmp	.+88     	; 0x1390 <__utoa_common>

00001338 <__mulhi_const_10>:
    1338:	bc 01       	movw	r22, r24
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	86 0f       	add	r24, r22
    1344:	97 1f       	adc	r25, r23
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	08 95       	ret

0000134c <__ultoa_ncheck>:
    134c:	bb 27       	eor	r27, r27

0000134e <__ultoa_common>:
    134e:	fa 01       	movw	r30, r20
    1350:	a6 2f       	mov	r26, r22
    1352:	62 17       	cp	r22, r18
    1354:	71 05       	cpc	r23, r1
    1356:	81 05       	cpc	r24, r1
    1358:	91 05       	cpc	r25, r1
    135a:	33 0b       	sbc	r19, r19
    135c:	30 fb       	bst	r19, 0
    135e:	66 f0       	brts	.+24     	; 0x1378 <__ultoa_common+0x2a>
    1360:	aa 27       	eor	r26, r26
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	aa 1f       	adc	r26, r26
    136c:	a2 17       	cp	r26, r18
    136e:	10 f0       	brcs	.+4      	; 0x1374 <__ultoa_common+0x26>
    1370:	a2 1b       	sub	r26, r18
    1372:	63 95       	inc	r22
    1374:	38 50       	subi	r19, 0x08	; 8
    1376:	a9 f7       	brne	.-22     	; 0x1362 <__ultoa_common+0x14>
    1378:	a0 5d       	subi	r26, 0xD0	; 208
    137a:	aa 33       	cpi	r26, 0x3A	; 58
    137c:	08 f0       	brcs	.+2      	; 0x1380 <__ultoa_common+0x32>
    137e:	a9 5d       	subi	r26, 0xD9	; 217
    1380:	a1 93       	st	Z+, r26
    1382:	36 f7       	brtc	.-52     	; 0x1350 <__ultoa_common+0x2>
    1384:	b1 11       	cpse	r27, r1
    1386:	b1 93       	st	Z+, r27
    1388:	10 82       	st	Z, r1
    138a:	ca 01       	movw	r24, r20
    138c:	19 c0       	rjmp	.+50     	; 0x13c0 <strrev>

0000138e <__utoa_ncheck>:
    138e:	bb 27       	eor	r27, r27

00001390 <__utoa_common>:
    1390:	fb 01       	movw	r30, r22
    1392:	55 27       	eor	r21, r21
    1394:	aa 27       	eor	r26, r26
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	aa 1f       	adc	r26, r26
    139c:	a4 17       	cp	r26, r20
    139e:	10 f0       	brcs	.+4      	; 0x13a4 <__utoa_common+0x14>
    13a0:	a4 1b       	sub	r26, r20
    13a2:	83 95       	inc	r24
    13a4:	50 51       	subi	r21, 0x10	; 16
    13a6:	b9 f7       	brne	.-18     	; 0x1396 <__utoa_common+0x6>
    13a8:	a0 5d       	subi	r26, 0xD0	; 208
    13aa:	aa 33       	cpi	r26, 0x3A	; 58
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <__utoa_common+0x20>
    13ae:	a9 5d       	subi	r26, 0xD9	; 217
    13b0:	a1 93       	st	Z+, r26
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	79 f7       	brne	.-34     	; 0x1394 <__utoa_common+0x4>
    13b6:	b1 11       	cpse	r27, r1
    13b8:	b1 93       	st	Z+, r27
    13ba:	11 92       	st	Z+, r1
    13bc:	cb 01       	movw	r24, r22
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <strrev>

000013c0 <strrev>:
    13c0:	dc 01       	movw	r26, r24
    13c2:	fc 01       	movw	r30, r24
    13c4:	67 2f       	mov	r22, r23
    13c6:	71 91       	ld	r23, Z+
    13c8:	77 23       	and	r23, r23
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <strrev+0x4>
    13cc:	32 97       	sbiw	r30, 0x02	; 2
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <strrev+0x18>
    13d0:	7c 91       	ld	r23, X
    13d2:	6d 93       	st	X+, r22
    13d4:	70 83       	st	Z, r23
    13d6:	62 91       	ld	r22, -Z
    13d8:	ae 17       	cp	r26, r30
    13da:	bf 07       	cpc	r27, r31
    13dc:	c8 f3       	brcs	.-14     	; 0x13d0 <strrev+0x10>
    13de:	08 95       	ret

000013e0 <eeprom_read_block>:
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22

000013e4 <eeprom_read_blraw>:
    13e4:	fc 01       	movw	r30, r24
    13e6:	e1 99       	sbic	0x1c, 1	; 28
    13e8:	fe cf       	rjmp	.-4      	; 0x13e6 <eeprom_read_blraw+0x2>
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <eeprom_read_blraw+0x14>
    13ec:	ff bb       	out	0x1f, r31	; 31
    13ee:	ee bb       	out	0x1e, r30	; 30
    13f0:	e0 9a       	sbi	0x1c, 0	; 28
    13f2:	31 96       	adiw	r30, 0x01	; 1
    13f4:	0d b2       	in	r0, 0x1d	; 29
    13f6:	0d 92       	st	X+, r0
    13f8:	41 50       	subi	r20, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	b8 f7       	brcc	.-18     	; 0x13ec <eeprom_read_blraw+0x8>
    13fe:	08 95       	ret

00001400 <eeprom_read_byte>:
    1400:	e1 99       	sbic	0x1c, 1	; 28
    1402:	fe cf       	rjmp	.-4      	; 0x1400 <eeprom_read_byte>
    1404:	9f bb       	out	0x1f, r25	; 31
    1406:	8e bb       	out	0x1e, r24	; 30
    1408:	e0 9a       	sbi	0x1c, 0	; 28
    140a:	99 27       	eor	r25, r25
    140c:	8d b3       	in	r24, 0x1d	; 29
    140e:	08 95       	ret

00001410 <eeprom_read_word>:
    1410:	a8 e1       	ldi	r26, 0x18	; 24
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	42 e0       	ldi	r20, 0x02	; 2
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	e5 cf       	rjmp	.-54     	; 0x13e4 <eeprom_read_blraw>

0000141a <eeprom_write_block>:
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <eeprom_write_block+0xa>
    1420:	2d 91       	ld	r18, X+
    1422:	05 d0       	rcall	.+10     	; 0x142e <eeprom_write_r18>
    1424:	41 50       	subi	r20, 0x01	; 1
    1426:	50 40       	sbci	r21, 0x00	; 0
    1428:	d8 f7       	brcc	.-10     	; 0x1420 <eeprom_write_block+0x6>
    142a:	08 95       	ret

0000142c <eeprom_write_byte>:
    142c:	26 2f       	mov	r18, r22

0000142e <eeprom_write_r18>:
    142e:	e1 99       	sbic	0x1c, 1	; 28
    1430:	fe cf       	rjmp	.-4      	; 0x142e <eeprom_write_r18>
    1432:	1c ba       	out	0x1c, r1	; 28
    1434:	9f bb       	out	0x1f, r25	; 31
    1436:	8e bb       	out	0x1e, r24	; 30
    1438:	2d bb       	out	0x1d, r18	; 29
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	e2 9a       	sbi	0x1c, 2	; 28
    1440:	e1 9a       	sbi	0x1c, 1	; 28
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	08 95       	ret

00001448 <eeprom_write_word>:
    1448:	f1 df       	rcall	.-30     	; 0x142c <eeprom_write_byte>
    144a:	27 2f       	mov	r18, r23
    144c:	f0 cf       	rjmp	.-32     	; 0x142e <eeprom_write_r18>

0000144e <_exit>:
    144e:	f8 94       	cli

00001450 <__stop_program>:
    1450:	ff cf       	rjmp	.-2      	; 0x1450 <__stop_program>
